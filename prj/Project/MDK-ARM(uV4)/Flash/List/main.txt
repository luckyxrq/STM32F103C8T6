; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\pt-1.4 -I..\..\letter-shell\src -I.\RTE\_Flash -IC:\Users\ws\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\ws\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\flash\obj\main.crf ..\..\User\app\src\main.c]
                          THUMB

                          AREA ||i.func_argv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  func_argv PROC
;;;185    /* func_argv "hello world" */
;;;186    int func_argv(int argc, char *agrv[])
000000  b570              PUSH     {r4-r6,lr}
;;;187    {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;188        printf("%dparameter(s)\r\n", argc);
000006  4601              MOV      r1,r0
000008  a008              ADR      r0,|L1.44|
00000a  f7fffffe          BL       __2printf
;;;189        for (char i = 1; i < argc; i++)
00000e  2401              MOVS     r4,#1
000010  e007              B        |L1.34|
;;;190        {
;;;191            printf("%s\r\n", agrv[i]);
000012  bf00              NOP      
                  |L1.20|
000014  f8561024          LDR      r1,[r6,r4,LSL #2]
000018  a009              ADR      r0,|L1.64|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1
000020  b2e4              UXTB     r4,r4                 ;189
                  |L1.34|
000022  42ac              CMP      r4,r5                 ;189
000024  dbf6              BLT      |L1.20|
;;;192        }
;;;193    	return 100;
000026  2064              MOVS     r0,#0x64
;;;194    }
000028  bd70              POP      {r4-r6,pc}
;;;195    SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), func_argv, func_argv, test);
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
00002c  25647061          DCB      "%dparameter(s)\r\n",0
000030  72616d65
000034  74657228
000038  73290d0a
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L1.64|
000040  25730d0a          DCB      "%s\r\n",0
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.func_string||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  func_string PROC
;;;197    /* func_string 666 'A' "hello world" */
;;;198    int func_string(int i, char ch, char *str)
000000  b510              PUSH     {r4,lr}
;;;199    {
;;;200        printf("input int: %d, char: %c, string: %s\r\n", i, ch, str);
000002  4613              MOV      r3,r2
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  a002              ADR      r0,|L2.20|
00000a  f7fffffe          BL       __2printf
;;;201    	
;;;202    	return 200;
00000e  20c8              MOVS     r0,#0xc8
;;;203    }
000010  bd10              POP      {r4,pc}
;;;204    SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(0)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC), func_string, func_string, test);
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
000014  696e7075          DCB      "input int: %d, char: %c, string: %s\r\n",0
000018  7420696e
00001c  743a2025
000020  642c2063
000024  6861723a
000028  2025632c
00002c  20737472
000030  696e673a
000034  2025730d
000038  0a00    
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;148    */
;;;149    int main(void)
000000  f7fffffe          BL       bsp_Init
;;;150    {
;;;151    	/*
;;;152    		ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;153    	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM
;;;154    	*/
;;;155    
;;;156    	bsp_Init();		/* 硬件初始化 */
;;;157    	
;;;158    	shell.read = shellRead;
000004  480a              LDR      r0,|L3.48|
000006  4909              LDR      r1,|L3.44|
;;;159    	shell.write = shellWrite;
;;;160    	shellInit(&shell, shellBuffer, 512);
000008  f44f7200          MOV      r2,#0x200
00000c  6641              STR      r1,[r0,#0x64]         ;159  ; shell
00000e  4909              LDR      r1,|L3.52|
000010  6681              STR      r1,[r0,#0x68]  ; shell
000012  f100016c          ADD      r1,r0,#0x6c
000016  f7fffffe          BL       shellInit
;;;161    	
;;;162    	/* Initialize the protothread state variables with PT_INIT(). */
;;;163    	PT_INIT(&pt1);
00001a  4907              LDR      r1,|L3.56|
00001c  2000              MOVS     r0,#0
00001e  8008              STRH     r0,[r1,#0]
;;;164    	PT_INIT(&pt2);
000020  1c89              ADDS     r1,r1,#2
000022  8008              STRH     r0,[r1,#0]
                  |L3.36|
;;;165    	
;;;166    	
;;;167    	
;;;168    	
;;;169      /*
;;;170       * Then we schedule the two protothreads by repeatedly calling their
;;;171       * protothread functions and passing a pointer to the protothread
;;;172       * state variables as arguments.
;;;173       */
;;;174    	while(1) 
;;;175    	{
;;;176    		shellTask(&shell);
000024  4802              LDR      r0,|L3.48|
000026  f7fffffe          BL       shellTask
00002a  e7fb              B        |L3.36|
;;;177    //		protothread1(&pt1);
;;;178    //		protothread2(&pt2);
;;;179    	}
;;;180    
;;;181    }
;;;182    
                          ENDP

                  |L3.44|
                          DCD      shellRead
                  |L3.48|
                          DCD      ||.bss||
                  |L3.52|
                          DCD      shellWrite
                  |L3.56|
                          DCD      ||.data||

                          AREA ||i.shellRead||, CODE, READONLY, ALIGN=1

                  shellRead PROC
;;;124     */
;;;125    short shellRead(char *data, unsigned short len)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127    	if(comGetChar(COM1, (uint8_t*)data))
000002  4601              MOV      r1,r0
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       comGetChar
00000a  2800              CMP      r0,#0
00000c  d000              BEQ      |L4.16|
;;;128    	{
;;;129    		return 1;
00000e  2001              MOVS     r0,#1
                  |L4.16|
;;;130    	}
;;;131    	else
;;;132    	{
;;;133    		return 0;
;;;134    	}
;;;135    }
000010  bd10              POP      {r4,pc}
;;;136    
                          ENDP


                          AREA ||i.shellWrite||, CODE, READONLY, ALIGN=1

                  shellWrite PROC
;;;109     */
;;;110    short shellWrite(char *data, unsigned short len)
000000  b510              PUSH     {r4,lr}
;;;111    {
000002  460c              MOV      r4,r1
;;;112    	comSendBuf(COM1, (uint8_t*)data, len);
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendBuf
;;;113        return len;
00000e  b220              SXTH     r0,r4
;;;114    }
000010  bd10              POP      {r4,pc}
;;;115    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  shell
                          %        108
                  shellBuffer
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  shellCmdfunc_argv
000000  66756e63          DCB      0x66,0x75,0x6e,0x63
000004  5f617267          DCB      0x5f,0x61,0x72,0x67
000008  7600              DCB      0x76,0x00

                          AREA ||area_number.10||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.constdata||
                  shellDescfunc_argv
000000  74657374          DCB      0x74,0x65,0x73,0x74
000004  00                DCB      0x00

                          AREA ||area_number.11||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.constdata||
                  shellCmdfunc_string
000000  66756e63          DCB      0x66,0x75,0x6e,0x63
000004  5f737472          DCB      0x5f,0x73,0x74,0x72
000008  696e6700          DCB      0x69,0x6e,0x67,0x00

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.constdata||
                  shellDescfunc_string
000000  74657374          DCB      0x74,0x65,0x73,0x74
000004  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=1

                  pt1
000000  0000              DCB      0x00,0x00
                  pt2
000002  0000              DCB      0x00,0x00

                          AREA shellCommand, DATA, READONLY, ALIGN=2

                  shellCommandfunc_argv
                  ||__tagsym$$used||
                          DCD      0x00000000
                          DCD      shellCmdfunc_argv
                          DCD      func_argv
                          DCD      shellDescfunc_argv
                  shellCommandfunc_string
                  |symbol_number.56|
                          DCD      0x00000100
                          DCD      shellCmdfunc_string
                          DCD      func_string
                          DCD      shellDescfunc_string

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_c8ec9078____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_c8ec9078____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_c8ec9078____REVSH|
#line 128
|__asm___6_main_c_c8ec9078____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
