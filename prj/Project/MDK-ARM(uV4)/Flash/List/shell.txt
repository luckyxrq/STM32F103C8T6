; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\shell.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\shell.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\pt-1.4 -I..\..\letter-shell\src -I.\RTE\_Flash -IC:\Users\ws\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\ws\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\flash\obj\shell.crf ..\..\letter-shell\src\shell.c]
                          THUMB

                          AREA ||i.shellBackspace||, CODE, READONLY, ALIGN=1

                  shellBackspace PROC
;;;1608    */
;;;1609   void shellBackspace(Shell *shell)
000000  2101              MOVS     r1,#1
;;;1610   {
;;;1611       shellDeleteByte(shell, 1);
000002  f7ffbffe          B.W      shellDeleteByte
;;;1612   }
;;;1613   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0)|SHELL_CMD_ENABLE_UNCHECKED,
                          ENDP


                          AREA ||i.shellCheckPermission||, CODE, READONLY, ALIGN=1

                  shellCheckPermission PROC
;;;436     */
;;;437    signed char shellCheckPermission(Shell *shell, ShellCommand *command)
000000  780b              LDRB     r3,[r1,#0]
;;;438    {
000002  b14b              CBZ      r3,|L2.24|
;;;439        return ((!command->attr.attrs.permission
;;;440                    || command->attr.attrs.type == SHELL_TYPE_USER
000004  784a              LDRB     r2,[r1,#1]
000006  f002020f          AND      r2,r2,#0xf
00000a  2a08              CMP      r2,#8
00000c  d004              BEQ      |L2.24|
;;;441                    || (shell->info.user
00000e  6802              LDR      r2,[r0,#0]
000010  b15a              CBZ      r2,|L2.42|
;;;442                        && (command->attr.attrs.permission 
000012  7812              LDRB     r2,[r2,#0]
000014  4213              TST      r3,r2
000016  d008              BEQ      |L2.42|
                  |L2.24|
;;;443                            & shell->info.user->attr.attrs.permission)))
;;;444                && (shell->status.isChecked
000018  f8900060          LDRB     r0,[r0,#0x60]
00001c  07c0              LSLS     r0,r0,#31
00001e  d102              BNE      |L2.38|
;;;445                    || command->attr.attrs.enableUnchecked))
000020  7848              LDRB     r0,[r1,#1]
000022  06c0              LSLS     r0,r0,#27
000024  d501              BPL      |L2.42|
                  |L2.38|
;;;446                ? 0 : -1;
000026  2000              MOVS     r0,#0
;;;447    }
000028  4770              BX       lr
                  |L2.42|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;446
00002e  4770              BX       lr
;;;448    
                          ENDP


                          AREA ||i.shellClear||, CODE, READONLY, ALIGN=2

                  shellClear PROC
;;;1907    */
;;;1908   void shellClear(void)
000000  b510              PUSH     {r4,lr}
;;;1909   {
;;;1910       Shell *shell = shellGetCurrent();
000002  f7fffffe          BL       shellGetCurrent
;;;1911       if (shell)
000006  2800              CMP      r0,#0
000008  d005              BEQ      |L3.22|
;;;1912       {
;;;1913           shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
00000a  4903              LDR      r1,|L3.24|
00000c  6b89              LDR      r1,[r1,#0x38]  ; shellText
00000e  e8bd4010          POP      {r4,lr}
000012  f7ffbffe          B.W      shellWriteString
                  |L3.22|
;;;1914       }
;;;1915   }
000016  bd10              POP      {r4,pc}
;;;1916   SHELL_EXPORT_CMD(
                          ENDP

                  |L3.24|
                          DCD      ||.data||

                          AREA ||i.shellClearCommandLine||, CODE, READONLY, ALIGN=1

                  shellClearCommandLine PROC
;;;780     */
;;;781    void shellClearCommandLine(Shell *shell)
000000  b5f8              PUSH     {r3-r7,lr}
;;;782    {
000002  4605              MOV      r5,r0
;;;783        for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
000004  8980              LDRH     r0,[r0,#0xc]
000006  89e9              LDRH     r1,[r5,#0xe]
000008  1a40              SUBS     r0,r0,r1
00000a  b204              SXTH     r4,r0
;;;784        {
;;;785            shellWriteByte(shell, ' ');
00000c  2620              MOVS     r6,#0x20
00000e  e007              B        |L4.32|
                  |L4.16|
000010  f88d6000          STRB     r6,[sp,#0]
000014  6eaa              LDR      r2,[r5,#0x68]
000016  2101              MOVS     r1,#1
000018  4668              MOV      r0,sp
00001a  4790              BLX      r2
00001c  1e64              SUBS     r4,r4,#1
00001e  b224              SXTH     r4,r4                 ;783
                  |L4.32|
000020  2c00              CMP      r4,#0                 ;783
000022  dcf5              BGT      |L4.16|
;;;786        }
;;;787        shellDeleteCommandLine(shell, shell->parser.length);
000024  7b29              LDRB     r1,[r5,#0xc]
000026  4628              MOV      r0,r5
000028  e8bd40f8          POP      {r3-r7,lr}
00002c  f7ffbffe          B.W      shellDeleteCommandLine
;;;788    }
;;;789    
                          ENDP


                          AREA ||i.shellCmds||, CODE, READONLY, ALIGN=1

                  shellCmds PROC
;;;1859    */
;;;1860   void shellCmds(void)
000000  b510              PUSH     {r4,lr}
;;;1861   {
;;;1862       Shell *shell = shellGetCurrent();
000002  f7fffffe          BL       shellGetCurrent
;;;1863       if (shell)
000006  2800              CMP      r0,#0
000008  d003              BEQ      |L5.18|
;;;1864       {
;;;1865           shellListCommand(shell);
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      shellListCommand
                  |L5.18|
;;;1866       }
;;;1867   }
000012  bd10              POP      {r4,pc}
;;;1868   SHELL_EXPORT_CMD(
                          ENDP


                          AREA ||i.shellDelete||, CODE, READONLY, ALIGN=1

                  shellDelete PROC
;;;1623    */
;;;1624   void shellDelete(Shell *shell)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;1625   {
;;;1626       shellDeleteByte(shell, -1);
000004  f7ffbffe          B.W      shellDeleteByte
;;;1627   }
;;;1628   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0)|SHELL_CMD_ENABLE_UNCHECKED,
                          ENDP


                          AREA ||i.shellDeleteByte||, CODE, READONLY, ALIGN=2

                  shellDeleteByte PROC
;;;842     */
;;;843    void shellDeleteByte(Shell *shell, signed char direction)
000000  b5f8              PUSH     {r3-r7,lr}
;;;844    {
000002  4604              MOV      r4,r0
;;;845        char offset = (direction == -1) ? 1 : 0;
000004  1c48              ADDS     r0,r1,#1
000006  d003              BEQ      |L7.16|
000008  2300              MOVS     r3,#0
                  |L7.10|
;;;846    
;;;847        if ((shell->parser.cursor == 0 && direction == 1)
00000a  89e2              LDRH     r2,[r4,#0xe]
00000c  b112              CBZ      r2,|L7.20|
00000e  e003              B        |L7.24|
                  |L7.16|
000010  2301              MOVS     r3,#1                 ;845
000012  e7fa              B        |L7.10|
                  |L7.20|
000014  2901              CMP      r1,#1
000016  d05d              BEQ      |L7.212|
                  |L7.24|
;;;848            || (shell->parser.cursor == shell->parser.length && direction == -1))
000018  89a0              LDRH     r0,[r4,#0xc]
00001a  4282              CMP      r2,r0
00001c  d101              BNE      |L7.34|
00001e  1c4d              ADDS     r5,r1,#1
000020  d058              BEQ      |L7.212|
                  |L7.34|
000022  2500              MOVS     r5,#0
;;;849        {
;;;850            return;
;;;851        }
;;;852        if (shell->parser.cursor == shell->parser.length && direction == 1)
000024  4282              CMP      r2,r0
000026  d101              BNE      |L7.44|
000028  2901              CMP      r1,#1
00002a  d001              BEQ      |L7.48|
                  |L7.44|
;;;853        {
;;;854            shell->parser.cursor--;
;;;855            shell->parser.length--;
;;;856            shell->parser.buffer[shell->parser.length] = 0;
;;;857            shellDeleteCommandLine(shell, 1);
;;;858        }
;;;859        else
;;;860        {
;;;861            for (short i = offset; i < shell->parser.length - shell->parser.cursor; i++)
00002c  4618              MOV      r0,r3
00002e  e013              B        |L7.88|
                  |L7.48|
000030  1e52              SUBS     r2,r2,#1
000032  1e40              SUBS     r0,r0,#1              ;854
000034  81e2              STRH     r2,[r4,#0xe]          ;854
000036  b280              UXTH     r0,r0                 ;855
000038  81a0              STRH     r0,[r4,#0xc]          ;855
00003a  6921              LDR      r1,[r4,#0x10]         ;856
00003c  540d              STRB     r5,[r1,r0]            ;856
00003e  4620              MOV      r0,r4                 ;857
000040  e8bd40f8          POP      {r3-r7,lr}            ;857
000044  2101              MOVS     r1,#1                 ;857
000046  f7ffbffe          B.W      shellDeleteCommandLine
                  |L7.74|
;;;862            {
;;;863                shell->parser.buffer[shell->parser.cursor + i - 1] = 
00004a  6922              LDR      r2,[r4,#0x10]
00004c  4411              ADD      r1,r1,r2
00004e  1e42              SUBS     r2,r0,#1
000050  5c46              LDRB     r6,[r0,r1]
000052  1c40              ADDS     r0,r0,#1
000054  548e              STRB     r6,[r1,r2]
000056  b200              SXTH     r0,r0                 ;861
                  |L7.88|
000058  89a2              LDRH     r2,[r4,#0xc]          ;861
00005a  89e1              LDRH     r1,[r4,#0xe]          ;861
00005c  1a52              SUBS     r2,r2,r1              ;861
00005e  4282              CMP      r2,r0                 ;861
000060  dcf3              BGT      |L7.74|
;;;864                    shell->parser.buffer[shell->parser.cursor + i];
;;;865            }
;;;866            shell->parser.length--;
000062  89a0              LDRH     r0,[r4,#0xc]
000064  1e40              SUBS     r0,r0,#1
000066  81a0              STRH     r0,[r4,#0xc]
;;;867            if (!offset)
;;;868            {
;;;869                shell->parser.cursor--;
;;;870                shellWriteByte(shell, '\b');
000068  2608              MOVS     r6,#8
00006a  b943              CBNZ     r3,|L7.126|
00006c  89e0              LDRH     r0,[r4,#0xe]          ;869
00006e  1e40              SUBS     r0,r0,#1              ;869
000070  81e0              STRH     r0,[r4,#0xe]          ;869
000072  f88d6000          STRB     r6,[sp,#0]
000076  6ea2              LDR      r2,[r4,#0x68]
000078  2101              MOVS     r1,#1
00007a  4668              MOV      r0,sp
00007c  4790              BLX      r2
                  |L7.126|
;;;871            }
;;;872            shell->parser.buffer[shell->parser.length] = 0;
00007e  89a1              LDRH     r1,[r4,#0xc]
000080  6920              LDR      r0,[r4,#0x10]
000082  5445              STRB     r5,[r0,r1]
;;;873            for (short i = shell->parser.cursor; i < shell->parser.length; i++)
000084  f9b4500e          LDRSH    r5,[r4,#0xe]
000088  e009              B        |L7.158|
                  |L7.138|
;;;874            {
;;;875                shellWriteByte(shell, shell->parser.buffer[i]);
00008a  6920              LDR      r0,[r4,#0x10]
00008c  2101              MOVS     r1,#1
00008e  5d40              LDRB     r0,[r0,r5]
000090  f88d0000          STRB     r0,[sp,#0]
000094  6ea2              LDR      r2,[r4,#0x68]
000096  4668              MOV      r0,sp
000098  4790              BLX      r2
00009a  1c6d              ADDS     r5,r5,#1
00009c  b22d              SXTH     r5,r5                 ;873
                  |L7.158|
00009e  89a0              LDRH     r0,[r4,#0xc]          ;873
0000a0  42a8              CMP      r0,r5                 ;873
0000a2  dcf2              BGT      |L7.138|
;;;876            }
;;;877            shellWriteByte(shell, ' ');
0000a4  2020              MOVS     r0,#0x20
0000a6  f88d0000          STRB     r0,[sp,#0]
0000aa  6ea2              LDR      r2,[r4,#0x68]
0000ac  2101              MOVS     r1,#1
0000ae  4668              MOV      r0,sp
0000b0  4790              BLX      r2
;;;878            for (short i = shell->parser.length - shell->parser.cursor + 1; i > 0; i--)
0000b2  89a0              LDRH     r0,[r4,#0xc]
0000b4  89e1              LDRH     r1,[r4,#0xe]
0000b6  1a40              SUBS     r0,r0,r1
0000b8  1c40              ADDS     r0,r0,#1
0000ba  b205              SXTH     r5,r0
0000bc  e008              B        |L7.208|
;;;879            {
;;;880                shellWriteByte(shell, '\b');
0000be  bf00              NOP      
                  |L7.192|
0000c0  f88d6000          STRB     r6,[sp,#0]
0000c4  6ea2              LDR      r2,[r4,#0x68]
0000c6  2101              MOVS     r1,#1
0000c8  4668              MOV      r0,sp
0000ca  4790              BLX      r2
0000cc  1e6d              SUBS     r5,r5,#1
0000ce  b22d              SXTH     r5,r5                 ;878
                  |L7.208|
0000d0  2d00              CMP      r5,#0                 ;878
0000d2  dcf5              BGT      |L7.192|
                  |L7.212|
;;;881            }
;;;882        }
;;;883    }
0000d4  bdf8              POP      {r3-r7,pc}
;;;884    
                          ENDP


                          AREA ||i.shellDeleteCommandLine||, CODE, READONLY, ALIGN=2

                  shellDeleteCommandLine PROC
;;;766     */
;;;767    void shellDeleteCommandLine(Shell *shell, unsigned char length)
000000  b570              PUSH     {r4-r6,lr}
;;;768    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;769        while (length--)
;;;770        {
;;;771            shellWriteString(shell, "\b \b");
000006  e003              B        |L8.16|
                  |L8.8|
000008  a103              ADR      r1,|L8.24|
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       shellWriteString
                  |L8.16|
000010  1e64              SUBS     r4,r4,#1              ;769
000012  b2e4              UXTB     r4,r4                 ;769
000014  d2f8              BCS      |L8.8|
;;;772        }
;;;773    }
000016  bd70              POP      {r4-r6,pc}
;;;774    
                          ENDP

                  |L8.24|
000018  08200800          DCB      "\b \b",0

                          AREA ||i.shellDown||, CODE, READONLY, ALIGN=1

                  shellDown PROC
;;;1460    */
;;;1461   void shellDown(Shell *shell)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;1462   {
;;;1463       shellHistory(shell, -1);
000004  f7ffbffe          B.W      shellHistory
;;;1464   }
;;;1465   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0), 0x1B5B4200, shellDown, down);
                          ENDP


                          AREA ||i.shellEnter||, CODE, READONLY, ALIGN=1

                  shellEnter PROC
;;;1636    */
;;;1637   void shellEnter(Shell *shell)
000000  b510              PUSH     {r4,lr}
;;;1638   {
000002  4604              MOV      r4,r0
;;;1639       shellExec(shell);
000004  f7fffffe          BL       shellExec
;;;1640       shellWritePrompt(shell, 1);
000008  4620              MOV      r0,r4
00000a  e8bd4010          POP      {r4,lr}
00000e  2101              MOVS     r1,#1
000010  f7ffbffe          B.W      shellWritePrompt
;;;1641   }
;;;1642   #if SHELL_ENTER_LF == 1
                          ENDP


                          AREA ||i.shellExec||, CODE, READONLY, ALIGN=2

                  shellExec PROC
;;;1399    */
;;;1400   void shellExec(Shell *shell)
000000  b570              PUSH     {r4-r6,lr}
;;;1401   {
000002  4604              MOV      r4,r0
;;;1402       
;;;1403       if (shell->parser.length == 0)
000004  8980              LDRH     r0,[r0,#0xc]
000006  2800              CMP      r0,#0                 ;1401
000008  d035              BEQ      |L11.118|
;;;1404       {
;;;1405           return;
;;;1406       }
;;;1407   
;;;1408       shell->parser.buffer[shell->parser.length] = 0;
00000a  6921              LDR      r1,[r4,#0x10]
00000c  2500              MOVS     r5,#0
;;;1409   
;;;1410       if (shell->status.isChecked)
;;;1411       {
;;;1412       #if SHELL_HISTORY_MAX_NUMBER > 0
;;;1413           shellHistoryAdd(shell);
;;;1414       #endif /** SHELL_HISTORY_MAX_NUMBER > 0 */
;;;1415           shellParserParam(shell);
;;;1416           shell->parser.length = shell->parser.cursor = 0;
;;;1417           if (shell->parser.paramCount == 0)
;;;1418           {
;;;1419               return;
;;;1420           }
;;;1421           shellWriteString(shell, "\r\n");
;;;1422   
;;;1423           ShellCommand *command = shellSeekCommand(shell,
;;;1424                                                    shell->parser.param[0],
;;;1425                                                    shell->commandList.base,
;;;1426                                                    0);
;;;1427           if (command != NULL)
;;;1428           {
;;;1429               shellRunCommand(shell, command);
;;;1430           }
;;;1431           else
;;;1432           {
;;;1433               shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
00000e  4e1e              LDR      r6,|L11.136|
000010  540d              STRB     r5,[r1,r0]            ;1408
000012  f8940060          LDRB     r0,[r4,#0x60]         ;1410
000016  07c0              LSLS     r0,r0,#31             ;1410
000018  d021              BEQ      |L11.94|
00001a  4620              MOV      r0,r4                 ;1413
00001c  f7fffffe          BL       shellHistoryAdd
000020  4620              MOV      r0,r4                 ;1415
000022  f7fffffe          BL       shellParserParam
000026  81e5              STRH     r5,[r4,#0xe]          ;1416
000028  81a5              STRH     r5,[r4,#0xc]          ;1416
00002a  8ee0              LDRH     r0,[r4,#0x36]         ;1417
00002c  2800              CMP      r0,#0                 ;1417
00002e  d022              BEQ      |L11.118|
000030  a116              ADR      r1,|L11.140|
000032  4620              MOV      r0,r4                 ;1421
000034  f7fffffe          BL       shellWriteString
000038  2300              MOVS     r3,#0                 ;1423
00003a  4620              MOV      r0,r4                 ;1423
00003c  6da2              LDR      r2,[r4,#0x58]         ;1423
00003e  6961              LDR      r1,[r4,#0x14]         ;1423
000040  f7fffffe          BL       shellSeekCommand
000044  0001              MOVS     r1,r0                 ;1423
000046  d004              BEQ      |L11.82|
000048  4620              MOV      r0,r4                 ;1429
00004a  e8bd4070          POP      {r4-r6,lr}            ;1429
00004e  f7ffbffe          B.W      shellRunCommand
                  |L11.82|
000052  4620              MOV      r0,r4
000054  69b1              LDR      r1,[r6,#0x18]  ; shellText
000056  e8bd4070          POP      {r4-r6,lr}
00005a  f7ffbffe          B.W      shellWriteString
                  |L11.94|
00005e  6820              LDR      r0,[r4,#0]
000060  6881              LDR      r1,[r0,#8]
000062  6920              LDR      r0,[r4,#0x10]
000064  f7fffffe          BL       strcmp
000068  b130              CBZ      r0,|L11.120|
00006a  6b71              LDR      r1,[r6,#0x34]  ; shellText
                  |L11.108|
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       shellWriteString
000072  81a5              STRH     r5,[r4,#0xc]
000074  81e5              STRH     r5,[r4,#0xe]
                  |L11.118|
;;;1434           }
;;;1435       }
;;;1436       else
;;;1437       {
;;;1438           shellCheckPassword(shell);
;;;1439       }
;;;1440   }
000076  bd70              POP      {r4-r6,pc}
                  |L11.120|
000078  f8940060          LDRB     r0,[r4,#0x60]
00007c  f0400001          ORR      r0,r0,#1
000080  f8840060          STRB     r0,[r4,#0x60]
000084  6831              LDR      r1,[r6,#0]  ; shellText
000086  e7f1              B        |L11.108|
;;;1441   
                          ENDP

                  |L11.136|
                          DCD      ||.data||
                  |L11.140|
00008c  0d0a00            DCB      "\r\n",0
00008f  00                DCB      0

                          AREA ||i.shellGetCommandDesc||, CODE, READONLY, ALIGN=1

                  shellGetCommandDesc PROC
;;;589     */
;;;590    static const char* shellGetCommandDesc(ShellCommand *command)
000000  68c0              LDR      r0,[r0,#0xc]
;;;591    {
;;;592        if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
;;;593        {
;;;594            return command->data.cmd.desc;
;;;595        }
;;;596        else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
;;;597        {
;;;598            return command->data.var.desc;
;;;599        }
;;;600        else if (command->attr.attrs.type <= SHELL_TYPE_USER)
;;;601        {
;;;602            return command->data.user.desc;
;;;603        }
;;;604        else
;;;605        {
;;;606            return command->data.key.desc;
;;;607        }
;;;608    }
000002  4770              BX       lr
;;;609    
                          ENDP


                          AREA ||i.shellGetCommandName||, CODE, READONLY, ALIGN=2

                  shellGetCommandName PROC
;;;556     */
;;;557    static const char* shellGetCommandName(ShellCommand *command)
000000  b500              PUSH     {lr}
;;;558    {
;;;559        static char buffer[9];
;;;560        for (unsigned char i = 0; i < 9; i++)
000002  2100              MOVS     r1,#0
;;;561        {
;;;562            buffer[i] = '0';
000004  4a0b              LDR      r2,|L13.52|
000006  2330              MOVS     r3,#0x30
                  |L13.8|
000008  5453              STRB     r3,[r2,r1]
00000a  1c49              ADDS     r1,r1,#1
00000c  b2c9              UXTB     r1,r1                 ;560
00000e  2909              CMP      r1,#9                 ;560
000010  d3fa              BCC      |L13.8|
;;;563        }
;;;564        if (command->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
000012  7841              LDRB     r1,[r0,#1]
000014  f001010f          AND      r1,r1,#0xf
000018  2901              CMP      r1,#1
00001a  d903              BLS      |L13.36|
;;;565        {
;;;566            return command->data.cmd.name;
;;;567        }
;;;568        else if (command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
00001c  2907              CMP      r1,#7
00001e  d901              BLS      |L13.36|
;;;569        {
;;;570            return command->data.var.name;
;;;571        }
;;;572        else if (command->attr.attrs.type <= SHELL_TYPE_USER)
000020  2908              CMP      r1,#8
000022  d801              BHI      |L13.40|
                  |L13.36|
;;;573        {
;;;574            return command->data.user.name;
000024  6840              LDR      r0,[r0,#4]
;;;575        }
;;;576        else
;;;577        {
;;;578            shellToHex(command->data.key.value, buffer);
;;;579            return buffer;
;;;580        }
;;;581    }
000026  bd00              POP      {pc}
                  |L13.40|
000028  6840              LDR      r0,[r0,#4]            ;578
00002a  4902              LDR      r1,|L13.52|
00002c  f7fffffe          BL       shellToHex
000030  4800              LDR      r0,|L13.52|
000032  bd00              POP      {pc}
;;;582    
                          ENDP

                  |L13.52|
                          DCD      ||.bss||+0x14

                          AREA ||i.shellGetCurrent||, CODE, READONLY, ALIGN=2

                  shellGetCurrent PROC
;;;262     */
;;;263    Shell* shellGetCurrent(void)
000000  4908              LDR      r1,|L14.36|
;;;264    {
;;;265        for (short i = 0; i < SHELL_MAX_NUMBER; i++)
000002  2000              MOVS     r0,#0
                  |L14.4|
;;;266        {
;;;267            if (shellList[i] && shellList[i]->status.isActive)
000004  f8512020          LDR      r2,[r1,r0,LSL #2]
000008  b132              CBZ      r2,|L14.24|
00000a  f8922060          LDRB     r2,[r2,#0x60]
00000e  0792              LSLS     r2,r2,#30
000010  d502              BPL      |L14.24|
;;;268            {
;;;269                return shellList[i];
000012  f8510020          LDR      r0,[r1,r0,LSL #2]
;;;270            }
;;;271        }
;;;272        return NULL;
;;;273    }
000016  4770              BX       lr
                  |L14.24|
000018  1c40              ADDS     r0,r0,#1
00001a  b200              SXTH     r0,r0                 ;265
00001c  2805              CMP      r0,#5                 ;265
00001e  dbf1              BLT      |L14.4|
000020  2000              MOVS     r0,#0                 ;272
000022  4770              BX       lr
;;;274    
                          ENDP

                  |L14.36|
                          DCD      ||.bss||

                          AREA ||i.shellGetVarValue||, CODE, READONLY, ALIGN=1

                  shellGetVarValue PROC
;;;1010    */
;;;1011   int shellGetVarValue(Shell *shell, ShellCommand *command)
000000  784a              LDRB     r2,[r1,#1]
;;;1012   {
;;;1013       int value = 0;
000002  2000              MOVS     r0,#0
;;;1014       switch (command->attr.attrs.type)
000004  f002020f          AND      r2,r2,#0xf
000008  1e92              SUBS     r2,r2,#2
00000a  2a06              CMP      r2,#6
00000c  d206              BCS      |L15.28|
00000e  e8dff002          TBB      [pc,r2]
000012  0306              DCB      0x03,0x06
000014  0a0d0d0f          DCB      0x0a,0x0d,0x0d,0x0f
;;;1015       {
;;;1016       case SHELL_TYPE_VAR_INT:
;;;1017           value = *((int *)(command->data.var.value));
000018  6888              LDR      r0,[r1,#8]
00001a  6800              LDR      r0,[r0,#0]
                  |L15.28|
;;;1018           break;
;;;1019       case SHELL_TYPE_VAR_SHORT:
;;;1020           value = *((short *)(command->data.var.value));
;;;1021           break;
;;;1022       case SHELL_TYPE_VAR_CHAR:
;;;1023           value = *((char *)(command->data.var.value));
;;;1024           break;
;;;1025       case SHELL_TYPE_VAR_STRING:
;;;1026       case SHELL_TYPE_VAR_POINT:
;;;1027           value = (int)(command->data.var.value);
;;;1028           break;
;;;1029       case SHELL_TYPE_VAR_NODE:
;;;1030           value = ((ShellNodeVarAttr *)command->data.var.value)->get ?
;;;1031                       ((ShellNodeVarAttr *)command->data.var.value)
;;;1032                           ->get(((ShellNodeVarAttr *)command->data.var.value)->var) : 0;
;;;1033           break;
;;;1034       default:
;;;1035           break;
;;;1036       }
;;;1037       return value;
;;;1038   }
00001c  4770              BX       lr
00001e  6888              LDR      r0,[r1,#8]            ;1020
000020  f9b00000          LDRSH    r0,[r0,#0]            ;1020
000024  4770              BX       lr
000026  6888              LDR      r0,[r1,#8]            ;1023
000028  7800              LDRB     r0,[r0,#0]            ;1023
00002a  4770              BX       lr
00002c  6888              LDR      r0,[r1,#8]            ;1028
00002e  4770              BX       lr
000030  6888              LDR      r0,[r1,#8]            ;1030
000032  6841              LDR      r1,[r0,#4]            ;1030
000034  b109              CBZ      r1,|L15.58|
000036  6800              LDR      r0,[r0,#0]            ;1031
000038  4708              BX       r1                    ;1031
                  |L15.58|
00003a  2000              MOVS     r0,#0                 ;1032
00003c  4770              BX       lr
;;;1039   
                          ENDP


                          AREA ||i.shellHandler||, CODE, READONLY, ALIGN=2

                  shellHandler PROC
;;;1709    */
;;;1710   void shellHandler(Shell *shell, char data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1711   {
000004  ea5f0901          MOVS     r9,r1
000008  4605              MOV      r5,r0
00000a  d049              BEQ      |L16.160|
;;;1712       SHELL_ASSERT(data, return);
;;;1713       SHELL_LOCK(shell);
;;;1714   
;;;1715   #if SHELL_LOCK_TIMEOUT > 0
;;;1716       if (shell->info.user->data.user.password
;;;1717           && strlen(shell->info.user->data.user.password) != 0
;;;1718           && SHELL_GET_TICK())
;;;1719       {
;;;1720           if (SHELL_GET_TICK() - shell->info.activeTime > SHELL_LOCK_TIMEOUT)
;;;1721           {
;;;1722               shell->status.isChecked = 0;
;;;1723           }
;;;1724       }
;;;1725   #endif
;;;1726   
;;;1727       /* 根据记录的按键键值计算当前字节在按键键值中的偏移 */
;;;1728       char keyByteOffset = 24;
;;;1729       int keyFilter = 0x00000000;
;;;1730       if ((shell->parser.keyValue & 0x0000FF00) != 0x00000000)
00000c  6ba8              LDR      r0,[r5,#0x38]
00000e  2418              MOVS     r4,#0x18              ;1728
000010  2700              MOVS     r7,#0                 ;1729
000012  f4104f7f          TST      r0,#0xff00
000016  d003              BEQ      |L16.32|
;;;1731       {
;;;1732           keyByteOffset = 0;
000018  2400              MOVS     r4,#0
;;;1733           keyFilter = 0xFFFFFF00;
00001a  f06f07ff          MVN      r7,#0xff
00001e  e00a              B        |L16.54|
                  |L16.32|
;;;1734       }
;;;1735       else if ((shell->parser.keyValue & 0x00FF0000) != 0x00000000)
000020  f4100f7f          TST      r0,#0xff0000
000024  d002              BEQ      |L16.44|
;;;1736       {
;;;1737           keyByteOffset = 8;
000026  2408              MOVS     r4,#8
;;;1738           keyFilter = 0xFFFF0000;
000028  4f27              LDR      r7,|L16.200|
00002a  e004              B        |L16.54|
                  |L16.44|
;;;1739       }
;;;1740       else if ((shell->parser.keyValue & 0xFF000000) != 0x00000000)
00002c  0e00              LSRS     r0,r0,#24
00002e  d002              BEQ      |L16.54|
;;;1741       {
;;;1742           keyByteOffset = 16;
000030  2410              MOVS     r4,#0x10
;;;1743           keyFilter = 0xFF000000;
000032  f04f477f          MOV      r7,#0xff000000
                  |L16.54|
;;;1744       }
;;;1745   
;;;1746       /* 遍历ShellCommand列表，尝试进行按键键值匹配 */
;;;1747       ShellCommand *base = (ShellCommand *)shell->commandList.base;
;;;1748       for (short i = 0; i < shell->commandList.count; i++)
000036  2600              MOVS     r6,#0
000038  46b2              MOV      r10,r6
00003a  f8d58058          LDR      r8,[r5,#0x58]
00003e  e033              B        |L16.168|
                  |L16.64|
;;;1749       {
;;;1750           /* 判断是否是按键定义并验证权限 */
;;;1751           if (base[i].attr.attrs.type == SHELL_TYPE_KEY
000040  eb081b06          ADD      r11,r8,r6,LSL #4
000044  f89b0001          LDRB     r0,[r11,#1]
000048  f000000f          AND      r0,r0,#0xf
00004c  2809              CMP      r0,#9
00004e  d129              BNE      |L16.164|
000050  4659              MOV      r1,r11
;;;1752               && shellCheckPermission(shell, &(base[i])) == 0)
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       shellCheckPermission
000058  bb20              CBNZ     r0,|L16.164|
;;;1753           {
;;;1754               /* 对输入的字节同按键键值进行匹配 */
;;;1755               if ((base[i].data.key.value & keyFilter) == shell->parser.keyValue
00005a  f8db0004          LDR      r0,[r11,#4]
00005e  6bab              LDR      r3,[r5,#0x38]
000060  ea000107          AND      r1,r0,r7
000064  4299              CMP      r1,r3
000066  d11d              BNE      |L16.164|
;;;1756                   && (base[i].data.key.value & (0xFF << keyByteOffset))
000068  22ff              MOVS     r2,#0xff
00006a  fa02f104          LSL      r1,r2,r4
00006e  4008              ANDS     r0,r0,r1
000070  fa09f104          LSL      r1,r9,r4
000074  4288              CMP      r0,r1
000076  d115              BNE      |L16.164|
;;;1757                       == (data << keyByteOffset))
;;;1758               {
;;;1759                   shell->parser.keyValue |= data << keyByteOffset;
000078  430b              ORRS     r3,r3,r1
;;;1760                   data = 0x00;
00007a  f04f0900          MOV      r9,#0
;;;1761                   if (keyByteOffset == 0 
00007e  63ab              STR      r3,[r5,#0x38]
000080  b134              CBZ      r4,|L16.144|
;;;1762                       || (base[i].data.key.value & (0xFF << (keyByteOffset - 8)))
000082  f1a40108          SUB      r1,r4,#8
000086  f8db0004          LDR      r0,[r11,#4]
00008a  408a              LSLS     r2,r2,r1
00008c  4210              TST      r0,r2
00008e  d109              BNE      |L16.164|
                  |L16.144|
;;;1763                           == 0x00000000)
;;;1764                   {
;;;1765                       if (base[i].data.key.function)
000090  eb081006          ADD      r0,r8,r6,LSL #4
000094  6881              LDR      r1,[r0,#8]
000096  b109              CBZ      r1,|L16.156|
;;;1766                       {
;;;1767                           base[i].data.key.function(shell);
000098  4628              MOV      r0,r5
00009a  4788              BLX      r1
                  |L16.156|
;;;1768                       }
;;;1769                       shell->parser.keyValue = 0x00000000;
;;;1770                       break;
00009c  f8c5a038          STR      r10,[r5,#0x38]
                  |L16.160|
;;;1771                   }
;;;1772               }
;;;1773           }
;;;1774       }
;;;1775   
;;;1776       if (data != 0x00)
;;;1777       {
;;;1778           shell->parser.keyValue = 0x00000000;
;;;1779           shellNormalInput(shell, data);
;;;1780       }
;;;1781   
;;;1782       if (SHELL_GET_TICK())
;;;1783       {
;;;1784           shell->info.activeTime = SHELL_GET_TICK();
;;;1785       }
;;;1786       SHELL_UNLOCK(shell);
;;;1787   }
0000a0  e8bd9ff0          POP      {r4-r12,pc}
                  |L16.164|
0000a4  1c76              ADDS     r6,r6,#1
0000a6  b236              SXTH     r6,r6                 ;1748
                  |L16.168|
0000a8  f8b5005c          LDRH     r0,[r5,#0x5c]         ;1748
0000ac  42b0              CMP      r0,r6                 ;1748
0000ae  dcc7              BGT      |L16.64|
0000b0  f1b90f00          CMP      r9,#0                 ;1776
0000b4  d0f4              BEQ      |L16.160|
0000b6  4649              MOV      r1,r9                 ;1779
0000b8  4628              MOV      r0,r5                 ;1779
0000ba  f8c5a038          STR      r10,[r5,#0x38]        ;1779
0000be  e8bd5ff0          POP      {r4-r12,lr}           ;1779
0000c2  f7ffbffe          B.W      shellNormalInput
;;;1788   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L16.200|
                          DCD      0xffff0000

                          AREA ||i.shellHelp||, CODE, READONLY, ALIGN=1

                  shellHelp PROC
;;;1686    */
;;;1687   void shellHelp(int argc, char *argv[])
000000  b510              PUSH     {r4,lr}
;;;1688   {
000002  460b              MOV      r3,r1
000004  4604              MOV      r4,r0
;;;1689       Shell *shell = shellGetCurrent();
000006  f7fffffe          BL       shellGetCurrent
;;;1690       SHELL_ASSERT(shell, return);
00000a  2800              CMP      r0,#0
00000c  d00b              BEQ      |L17.38|
;;;1691       if (argc == 1)
00000e  2c01              CMP      r4,#1
000010  d005              BEQ      |L17.30|
;;;1692       {
;;;1693           shellListAll(shell);
;;;1694       }
;;;1695       else if (argc > 1)
000012  dd08              BLE      |L17.38|
;;;1696       {
;;;1697           shellWriteCommandHelp(shell, argv[1]);
000014  6859              LDR      r1,[r3,#4]
000016  e8bd4010          POP      {r4,lr}
00001a  f7ffbffe          B.W      shellWriteCommandHelp
                  |L17.30|
00001e  e8bd4010          POP      {r4,lr}
000022  f7ffbffe          B.W      shellListCommand
                  |L17.38|
;;;1698       }
;;;1699   }
000026  bd10              POP      {r4,pc}
;;;1700   SHELL_EXPORT_CMD(
                          ENDP


                          AREA ||i.shellHistory||, CODE, READONLY, ALIGN=1

                  shellHistory PROC
;;;1336    */
;;;1337   static void shellHistory(Shell *shell, signed char dir)
000000  b570              PUSH     {r4-r6,lr}
;;;1338   {
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0
;;;1339       if (dir > 0)
000006  2900              CMP      r1,#0
000008  dd18              BLE      |L18.60|
;;;1340       {
;;;1341           if (shell->history.offset-- <= 
00000a  f9b43054          LDRSH    r3,[r4,#0x54]
00000e  f1a30001          SUB      r0,r3,#1
000012  f8a40054          STRH     r0,[r4,#0x54]
000016  f8b41050          LDRH     r1,[r4,#0x50]
00001a  f8b40052          LDRH     r0,[r4,#0x52]
00001e  4281              CMP      r1,r0
000020  d901              BLS      |L18.38|
;;;1342               -((shell->history.number > shell->history.record) ?
;;;1343                   shell->history.number : shell->history.record))
000022  460a              MOV      r2,r1
000024  e000              B        |L18.40|
                  |L18.38|
000026  4602              MOV      r2,r0
                  |L18.40|
000028  4252              RSBS     r2,r2,#0
00002a  4293              CMP      r3,r2
00002c  dc12              BGT      |L18.84|
;;;1344           {
;;;1345               shell->history.offset = -((shell->history.number > shell->history.record)
00002e  4281              CMP      r1,r0
000030  d900              BLS      |L18.52|
000032  4608              MOV      r0,r1
                  |L18.52|
;;;1346                                       ? shell->history.number : shell->history.record);
000034  4240              RSBS     r0,r0,#0
000036  f8a40054          STRH     r0,[r4,#0x54]
00003a  e00b              B        |L18.84|
                  |L18.60|
;;;1347           }
;;;1348       }
;;;1349       else if (dir < 0)
00003c  da09              BGE      |L18.82|
;;;1350       {
;;;1351           if (++shell->history.offset > 0)
00003e  f8b40054          LDRH     r0,[r4,#0x54]
000042  1c40              ADDS     r0,r0,#1
000044  b200              SXTH     r0,r0
000046  f8a40054          STRH     r0,[r4,#0x54]
00004a  2800              CMP      r0,#0
00004c  dd02              BLE      |L18.84|
;;;1352           {
;;;1353               shell->history.offset = 0;
00004e  f8a45054          STRH     r5,[r4,#0x54]
                  |L18.82|
;;;1354               return;
;;;1355           }
;;;1356       }
;;;1357       else
;;;1358       {
;;;1359           return;
;;;1360       }
;;;1361       shellClearCommandLine(shell);
;;;1362       if (shell->history.offset == 0)
;;;1363       {
;;;1364           shell->parser.cursor = shell->parser.length = 0;
;;;1365       }
;;;1366       else
;;;1367       {
;;;1368           if ((shell->parser.length = shellStringCopy(shell->parser.buffer,
;;;1369                   shell->history.item[(shell->history.record + SHELL_HISTORY_MAX_NUMBER
;;;1370                       + shell->history.offset) % SHELL_HISTORY_MAX_NUMBER])) == 0)
;;;1371           {
;;;1372               return;
;;;1373           }
;;;1374           shell->parser.cursor = shell->parser.length;
;;;1375           shellWriteString(shell, shell->parser.buffer);
;;;1376       }
;;;1377       
;;;1378   }
000052  bd70              POP      {r4-r6,pc}
                  |L18.84|
000054  4620              MOV      r0,r4                 ;1361
000056  f7fffffe          BL       shellClearCommandLine
00005a  f9b40054          LDRSH    r0,[r4,#0x54]         ;1362
00005e  b1c0              CBZ      r0,|L18.146|
000060  f8b41052          LDRH     r1,[r4,#0x52]         ;1368
000064  4408              ADD      r0,r0,r1              ;1368
000066  2105              MOVS     r1,#5                 ;1368
000068  1d40              ADDS     r0,r0,#5              ;1368
00006a  fb90f2f1          SDIV     r2,r0,r1              ;1368
00006e  fb010012          MLS      r0,r1,r2,r0           ;1368
000072  eb040080          ADD      r0,r4,r0,LSL #2       ;1368
000076  6bc1              LDR      r1,[r0,#0x3c]         ;1368
000078  6920              LDR      r0,[r4,#0x10]         ;1368
00007a  f7fffffe          BL       shellStringCopy
00007e  81a0              STRH     r0,[r4,#0xc]          ;1368
000080  2800              CMP      r0,#0                 ;1368
000082  d0e6              BEQ      |L18.82|
000084  81e0              STRH     r0,[r4,#0xe]          ;1374
000086  4620              MOV      r0,r4                 ;1375
000088  6921              LDR      r1,[r4,#0x10]         ;1375
00008a  e8bd4070          POP      {r4-r6,lr}            ;1375
00008e  f7ffbffe          B.W      shellWriteString
                  |L18.146|
000092  81a5              STRH     r5,[r4,#0xc]          ;1364
000094  81e5              STRH     r5,[r4,#0xe]          ;1364
000096  bd70              POP      {r4-r6,pc}
;;;1379   #endif /** SHELL_HISTORY_MAX_NUMBER > 0 */
                          ENDP


                          AREA ||i.shellHistoryAdd||, CODE, READONLY, ALIGN=1

                  shellHistoryAdd PROC
;;;1304    */
;;;1305   static void shellHistoryAdd(Shell *shell)
000000  b570              PUSH     {r4-r6,lr}
;;;1306   {
;;;1307       shell->history.offset = 0;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;1306
000006  f8a05054          STRH     r5,[r0,#0x54]
;;;1308       if (shell->history.number > 0
00000a  f8b00050          LDRH     r0,[r0,#0x50]
00000e  b158              CBZ      r0,|L19.40|
;;;1309           && strcmp(shell->history.item[(shell->history.record == 0 ? 
000010  f8b40052          LDRH     r0,[r4,#0x52]
000014  6921              LDR      r1,[r4,#0x10]
000016  b900              CBNZ     r0,|L19.26|
;;;1310                   SHELL_HISTORY_MAX_NUMBER : shell->history.record) - 1],
000018  2005              MOVS     r0,#5
                  |L19.26|
00001a  eb040080          ADD      r0,r4,r0,LSL #2
00001e  6b80              LDR      r0,[r0,#0x38]
000020  f7fffffe          BL       strcmp
000024  2800              CMP      r0,#0
000026  d01e              BEQ      |L19.102|
                  |L19.40|
;;;1311                   shell->parser.buffer) == 0)
;;;1312       {
;;;1313           return;
;;;1314       }
;;;1315       if (shellStringCopy(shell->history.item[shell->history.record],
000028  f8b40052          LDRH     r0,[r4,#0x52]
00002c  6921              LDR      r1,[r4,#0x10]
00002e  eb040080          ADD      r0,r4,r0,LSL #2
000032  6bc0              LDR      r0,[r0,#0x3c]
000034  f7fffffe          BL       shellStringCopy
000038  b120              CBZ      r0,|L19.68|
;;;1316                           shell->parser.buffer) != 0)
;;;1317       {
;;;1318           shell->history.record++;
00003a  f8b40052          LDRH     r0,[r4,#0x52]
00003e  1c40              ADDS     r0,r0,#1
000040  f8a40052          STRH     r0,[r4,#0x52]
                  |L19.68|
;;;1319       }
;;;1320       if (++shell->history.number > SHELL_HISTORY_MAX_NUMBER)
000044  f8b40050          LDRH     r0,[r4,#0x50]
000048  1c40              ADDS     r0,r0,#1
00004a  b280              UXTH     r0,r0
00004c  f8a40050          STRH     r0,[r4,#0x50]
000050  2805              CMP      r0,#5
000052  d902              BLS      |L19.90|
;;;1321       {
;;;1322           shell->history.number = SHELL_HISTORY_MAX_NUMBER;
000054  2005              MOVS     r0,#5
000056  f8a40050          STRH     r0,[r4,#0x50]
                  |L19.90|
;;;1323       }
;;;1324       if (shell->history.record >= SHELL_HISTORY_MAX_NUMBER)
00005a  f8b40052          LDRH     r0,[r4,#0x52]
00005e  2805              CMP      r0,#5
000060  d301              BCC      |L19.102|
;;;1325       {
;;;1326           shell->history.record = 0;
000062  f8a45052          STRH     r5,[r4,#0x52]
                  |L19.102|
;;;1327       }
;;;1328   }
000066  bd70              POP      {r4-r6,pc}
;;;1329   
                          ENDP


                          AREA ||i.shellInit||, CODE, READONLY, ALIGN=2

                  shellInit PROC
;;;167     */
;;;168    void shellInit(Shell *shell, char *buffer, unsigned short size)
000000  b510              PUSH     {r4,lr}
;;;169    {
000002  4604              MOV      r4,r0
;;;170        shell->parser.length = 0;
000004  2000              MOVS     r0,#0
000006  81a0              STRH     r0,[r4,#0xc]
;;;171        shell->parser.cursor = 0;
000008  81e0              STRH     r0,[r4,#0xe]
00000a  460b              MOV      r3,r1                 ;169
;;;172        shell->info.user = NULL;
;;;173        shell->status.isChecked = 1;
00000c  6020              STR      r0,[r4,#0]
00000e  f8941060          LDRB     r1,[r4,#0x60]
000012  f0410101          ORR      r1,r1,#1
000016  f8841060          STRB     r1,[r4,#0x60]
;;;174    
;;;175        shell->parser.buffer = buffer;
;;;176        shell->parser.bufferSize = size / (SHELL_HISTORY_MAX_NUMBER + 1);
00001a  2106              MOVS     r1,#6
00001c  fbb2f1f1          UDIV     r1,r2,r1
000020  6123              STR      r3,[r4,#0x10]
000022  86a1              STRH     r1,[r4,#0x34]
;;;177        
;;;178    #if SHELL_HISTORY_MAX_NUMBER > 0
;;;179        shell->history.offset = 0;
000024  f8a40054          STRH     r0,[r4,#0x54]
;;;180        shell->history.number = 0;
000028  f8a40050          STRH     r0,[r4,#0x50]
;;;181        shell->history.record = 0;
00002c  f8a40052          STRH     r0,[r4,#0x52]
                  |L20.48|
;;;182        for (short i = 0; i < SHELL_HISTORY_MAX_NUMBER; i++)
;;;183        {
;;;184            shell->history.item[i] = buffer + shell->parser.bufferSize * (i + 1);
000030  8ea2              LDRH     r2,[r4,#0x34]
000032  1c41              ADDS     r1,r0,#1
000034  fb023201          MLA      r2,r2,r1,r3
000038  eb040080          ADD      r0,r4,r0,LSL #2
00003c  63c2              STR      r2,[r0,#0x3c]         ;182
00003e  b208              SXTH     r0,r1                 ;182
000040  2805              CMP      r0,#5                 ;182
000042  dbf5              BLT      |L20.48|
;;;185        }
;;;186    #endif /** SHELL_HISTORY_MAX_NUMBER > 0 */
;;;187    
;;;188    #if SHELL_USING_CMD_EXPORT == 1
;;;189        #if defined(__CC_ARM) || (defined(__ARMCC_VERSION) && __ARMCC_VERSION >= 6000000)
;;;190            shell->commandList.base = (ShellCommand *)(&shellCommand$$Base);
000044  4811              LDR      r0,|L20.140|
;;;191            shell->commandList.count = ((unsigned int)(&shellCommand$$Limit)
000046  4912              LDR      r1,|L20.144|
000048  65a0              STR      r0,[r4,#0x58]
00004a  1a08              SUBS     r0,r1,r0
00004c  0900              LSRS     r0,r0,#4
00004e  f8a4005c          STRH     r0,[r4,#0x5c]
000052  4910              LDR      r1,|L20.148|
000054  2000              MOVS     r0,#0
000056  bf00              NOP      
                  |L20.88|
000058  f8512020          LDR      r2,[r1,r0,LSL #2]
00005c  b19a              CBZ      r2,|L20.134|
00005e  1c40              ADDS     r0,r0,#1
000060  b200              SXTH     r0,r0
000062  2805              CMP      r0,#5
000064  dbf8              BLT      |L20.88|
                  |L20.102|
;;;192                                    - (unsigned int)(&shellCommand$$Base))
;;;193                                    / sizeof(ShellCommand);
;;;194    
;;;195        #elif defined(__ICCARM__) || defined(__ICCRX__)
;;;196            shell->commandList.base = (ShellCommand *)(__section_begin("shellCommand"));
;;;197            shell->commandList.count = ((unsigned int)(__section_end("shellCommand"))
;;;198                                    - (unsigned int)(__section_begin("shellCommand")))
;;;199                                    / sizeof(ShellCommand);
;;;200        #elif defined(__GNUC__)
;;;201            shell->commandList.base = (ShellCommand *)(&_shell_command_start);
;;;202            shell->commandList.count = ((unsigned int)(&_shell_command_end)
;;;203                                    - (unsigned int)(&_shell_command_start))
;;;204                                    / sizeof(ShellCommand);
;;;205        #else
;;;206            #error not supported compiler, please use command table mode
;;;207        #endif
;;;208    #else
;;;209        shell->commandList.base = (ShellCommand *)shellCommandList;
;;;210        shell->commandList.count = shellCommandCount;
;;;211    #endif
;;;212    
;;;213        shellAdd(shell);
;;;214    
;;;215        shellSetUser(shell, shellSeekCommand(shell,
000066  2300              MOVS     r3,#0
000068  a10b              ADR      r1,|L20.152|
00006a  4620              MOV      r0,r4
00006c  6da2              LDR      r2,[r4,#0x58]
00006e  f7fffffe          BL       shellSeekCommand
000072  4601              MOV      r1,r0
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       shellSetUser
;;;216                                             SHELL_DEFAULT_USER,
;;;217                                             shell->commandList.base,
;;;218                                             0));
;;;219        shellWritePrompt(shell, 1);
00007a  4620              MOV      r0,r4
00007c  e8bd4010          POP      {r4,lr}
000080  2101              MOVS     r1,#1
000082  f7ffbffe          B.W      shellWritePrompt
                  |L20.134|
000086  f8414020          STR      r4,[r1,r0,LSL #2]
00008a  e7ec              B        |L20.102|
;;;220    }
;;;221    
                          ENDP

                  |L20.140|
                          DCD      ||shellCommand$$Base||
                  |L20.144|
                          DCD      ||shellCommand$$Limit||
                  |L20.148|
                          DCD      ||.bss||
                  |L20.152|
000098  6c657474          DCB      "letter",0
00009c  657200  
00009f  00                DCB      0

                          AREA ||i.shellInsertByte||, CODE, READONLY, ALIGN=2

                  shellInsertByte PROC
;;;796     */
;;;797    void shellInsertByte(Shell *shell, char data)
000000  b5f8              PUSH     {r3-r7,lr}
;;;798    {
000002  4604              MOV      r4,r0
;;;799        /* 判断输入数据是否过长 */
;;;800        if (shell->parser.length >= shell->parser.bufferSize - 1)
000004  8980              LDRH     r0,[r0,#0xc]
000006  8ea2              LDRH     r2,[r4,#0x34]
000008  1e52              SUBS     r2,r2,#1
00000a  4290              CMP      r0,r2
00000c  db0e              BLT      |L21.44|
;;;801        {
;;;802            shellWriteString(shell, shellText[SHELL_TEXT_CMD_TOO_LONG]);
00000e  4832              LDR      r0,|L21.216|
000010  6841              LDR      r1,[r0,#4]  ; shellText
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       shellWriteString
;;;803            shellWritePrompt(shell, 1);
000018  2101              MOVS     r1,#1
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       shellWritePrompt
;;;804            shellWriteString(shell, shell->parser.buffer);
000020  4620              MOV      r0,r4
000022  6921              LDR      r1,[r4,#0x10]
000024  e8bd40f8          POP      {r3-r7,lr}
000028  f7ffbffe          B.W      shellWriteString
                  |L21.44|
;;;805            return;
;;;806        }
;;;807    
;;;808        /* 插入数据 */
;;;809        if (shell->parser.cursor == shell->parser.length)
00002c  89e2              LDRH     r2,[r4,#0xe]
00002e  2300              MOVS     r3,#0
000030  4282              CMP      r2,r0
000032  d114              BNE      |L21.94|
;;;810        {
;;;811            shell->parser.buffer[shell->parser.length++] = data;
000034  4602              MOV      r2,r0
000036  6925              LDR      r5,[r4,#0x10]
000038  f1000001          ADD      r0,r0,#1
00003c  81a0              STRH     r0,[r4,#0xc]
00003e  54a9              STRB     r1,[r5,r2]
;;;812            shell->parser.buffer[shell->parser.length] = 0;
000040  89a2              LDRH     r2,[r4,#0xc]
000042  6920              LDR      r0,[r4,#0x10]
000044  5483              STRB     r3,[r0,r2]
;;;813            shell->parser.cursor++;
000046  89e0              LDRH     r0,[r4,#0xe]
000048  f1000001          ADD      r0,r0,#1
00004c  81e0              STRH     r0,[r4,#0xe]
;;;814            shellWriteByte(shell, data);
00004e  f88d1000          STRB     r1,[sp,#0]
000052  6ea2              LDR      r2,[r4,#0x68]
000054  f04f0101          MOV      r1,#1
000058  4668              MOV      r0,sp
00005a  4790              BLX      r2
                  |L21.92|
;;;815        }
;;;816        else if (shell->parser.cursor < shell->parser.length)
;;;817        {
;;;818            for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
;;;819            {
;;;820                shell->parser.buffer[shell->parser.cursor + i] = 
;;;821                    shell->parser.buffer[shell->parser.cursor + i - 1];
;;;822            }
;;;823            shell->parser.buffer[shell->parser.cursor++] = data;
;;;824            shell->parser.buffer[++shell->parser.length] = 0;
;;;825            for (short i = shell->parser.cursor - 1; i < shell->parser.length; i++)
;;;826            {
;;;827                shellWriteByte(shell, shell->parser.buffer[i]);
;;;828            }
;;;829            for (short i = shell->parser.length - shell->parser.cursor; i > 0; i--)
;;;830            {
;;;831                shellWriteByte(shell, '\b');
;;;832            }
;;;833        }
;;;834    }
00005c  bdf8              POP      {r3-r7,pc}
                  |L21.94|
00005e  d2fd              BCS      |L21.92|
000060  eba00002          SUB      r0,r0,r2              ;818
000064  b200              SXTH     r0,r0                 ;818
000066  e007              B        |L21.120|
                  |L21.104|
000068  89e5              LDRH     r5,[r4,#0xe]          ;820
00006a  6922              LDR      r2,[r4,#0x10]         ;820
00006c  4415              ADD      r5,r5,r2              ;820
00006e  f1a00201          SUB      r2,r0,#1              ;820
000072  5cae              LDRB     r6,[r5,r2]            ;820
000074  5546              STRB     r6,[r0,r5]            ;820
000076  b210              SXTH     r0,r2                 ;818
                  |L21.120|
000078  2800              CMP      r0,#0                 ;818
00007a  dcf5              BGT      |L21.104|
00007c  89e0              LDRH     r0,[r4,#0xe]          ;823
00007e  6925              LDR      r5,[r4,#0x10]         ;823
000080  1c42              ADDS     r2,r0,#1              ;823
000082  81e2              STRH     r2,[r4,#0xe]          ;823
000084  5429              STRB     r1,[r5,r0]            ;823
000086  89a0              LDRH     r0,[r4,#0xc]          ;824
000088  6921              LDR      r1,[r4,#0x10]         ;824
00008a  1c40              ADDS     r0,r0,#1              ;824
00008c  b280              UXTH     r0,r0                 ;824
00008e  81a0              STRH     r0,[r4,#0xc]          ;824
000090  540b              STRB     r3,[r1,r0]            ;824
000092  89e0              LDRH     r0,[r4,#0xe]          ;825
000094  1e40              SUBS     r0,r0,#1              ;825
000096  b205              SXTH     r5,r0                 ;825
000098  e009              B        |L21.174|
                  |L21.154|
00009a  6920              LDR      r0,[r4,#0x10]         ;827
00009c  2101              MOVS     r1,#1                 ;827
00009e  5d40              LDRB     r0,[r0,r5]            ;827
0000a0  f88d0000          STRB     r0,[sp,#0]            ;827
0000a4  6ea2              LDR      r2,[r4,#0x68]         ;827
0000a6  4668              MOV      r0,sp                 ;827
0000a8  4790              BLX      r2                    ;827
0000aa  1c6d              ADDS     r5,r5,#1              ;827
0000ac  b22d              SXTH     r5,r5                 ;825
                  |L21.174|
0000ae  89a0              LDRH     r0,[r4,#0xc]          ;825
0000b0  42a8              CMP      r0,r5                 ;825
0000b2  dcf2              BGT      |L21.154|
0000b4  89e1              LDRH     r1,[r4,#0xe]          ;829
0000b6  b280              UXTH     r0,r0                 ;829
0000b8  1a40              SUBS     r0,r0,r1              ;829
0000ba  b205              SXTH     r5,r0                 ;829
0000bc  2608              MOVS     r6,#8                 ;831
0000be  e007              B        |L21.208|
                  |L21.192|
0000c0  f88d6000          STRB     r6,[sp,#0]            ;831
0000c4  6ea2              LDR      r2,[r4,#0x68]         ;831
0000c6  2101              MOVS     r1,#1                 ;831
0000c8  4668              MOV      r0,sp                 ;831
0000ca  4790              BLX      r2                    ;831
0000cc  1e6d              SUBS     r5,r5,#1              ;831
0000ce  b22d              SXTH     r5,r5                 ;829
                  |L21.208|
0000d0  2d00              CMP      r5,#0                 ;829
0000d2  dcf5              BGT      |L21.192|
0000d4  bdf8              POP      {r3-r7,pc}
;;;835    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L21.216|
                          DCD      ||.data||

                          AREA ||i.shellKeys||, CODE, READONLY, ALIGN=1

                  shellKeys PROC
;;;1891    */
;;;1892   void shellKeys(void)
000000  b510              PUSH     {r4,lr}
;;;1893   {
;;;1894       Shell *shell = shellGetCurrent();
000002  f7fffffe          BL       shellGetCurrent
;;;1895       if (shell)
000006  2800              CMP      r0,#0
000008  d003              BEQ      |L22.18|
;;;1896       {
;;;1897           shellListKey(shell);
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      shellListKey
                  |L22.18|
;;;1898       }
;;;1899   }
000012  bd10              POP      {r4,pc}
;;;1900   SHELL_EXPORT_CMD(
                          ENDP


                          AREA ||i.shellLeft||, CODE, READONLY, ALIGN=1

                  shellLeft PROC
;;;1489    */
;;;1490   void shellLeft(Shell *shell)
000000  b538              PUSH     {r3-r5,lr}
;;;1491   {
000002  4604              MOV      r4,r0
;;;1492       if (shell->parser.cursor > 0)
000004  89c0              LDRH     r0,[r0,#0xe]
000006  2800              CMP      r0,#0                 ;1491
000008  d009              BEQ      |L23.30|
;;;1493       {
;;;1494           shellWriteByte(shell, '\b');
00000a  2008              MOVS     r0,#8
00000c  f88d0000          STRB     r0,[sp,#0]
000010  6ea2              LDR      r2,[r4,#0x68]
000012  2101              MOVS     r1,#1
000014  4668              MOV      r0,sp
000016  4790              BLX      r2
;;;1495           shell->parser.cursor--;
000018  89e0              LDRH     r0,[r4,#0xe]
00001a  1e40              SUBS     r0,r0,#1
00001c  81e0              STRH     r0,[r4,#0xe]
                  |L23.30|
;;;1496       }
;;;1497   }
00001e  bd38              POP      {r3-r5,pc}
;;;1498   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0)|SHELL_CMD_ENABLE_UNCHECKED,
                          ENDP


                          AREA ||i.shellListAll||, CODE, READONLY, ALIGN=1

                  shellListAll PROC
;;;745     */
;;;746    void shellListAll(Shell *shell)
000000  f7ffbffe          B.W      shellListCommand
;;;747    {
;;;748    #if SHELL_HELP_LIST_USER == 1
;;;749        shellListUser(shell);
;;;750    #endif
;;;751        shellListCommand(shell);
;;;752    #if SHELL_HELP_LIST_VAR == 1
;;;753        shellListVar(shell);
;;;754    #endif
;;;755    #if SHELL_HELP_LIST_KEY == 1
;;;756        shellListKey(shell);
;;;757    #endif
;;;758    }
;;;759    
                          ENDP


                          AREA ||i.shellListCommand||, CODE, READONLY, ALIGN=2

                  shellListCommand PROC
;;;662     */
;;;663    void shellListCommand(Shell *shell)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;664    {
000004  4606              MOV      r6,r0
;;;665        ShellCommand *base = (ShellCommand *)shell->commandList.base;
;;;666        shellWriteString(shell, shellText[SHELL_TEXT_CMD_LIST]);
000006  6d87              LDR      r7,[r0,#0x58]
000008  480f              LDR      r0,|L25.72|
00000a  6881              LDR      r1,[r0,#8]  ; shellText
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       shellWriteString
;;;667        for (short i = 0; i < shell->commandList.count; i++)
000012  2400              MOVS     r4,#0
000014  e012              B        |L25.60|
;;;668        {
;;;669            if (base[i].attr.attrs.type <= SHELL_TYPE_CMD_FUNC
000016  bf00              NOP      
                  |L25.24|
000018  eb071504          ADD      r5,r7,r4,LSL #4
00001c  7868              LDRB     r0,[r5,#1]
00001e  f000000f          AND      r0,r0,#0xf
000022  2801              CMP      r0,#1
000024  d808              BHI      |L25.56|
000026  4629              MOV      r1,r5
;;;670                && shellCheckPermission(shell, &base[i]) == 0)
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       shellCheckPermission
00002e  b918              CBNZ     r0,|L25.56|
000030  4629              MOV      r1,r5
;;;671            {
;;;672                shellListItem(shell, &base[i]);
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       shellListItem
                  |L25.56|
000038  1c64              ADDS     r4,r4,#1
00003a  b224              SXTH     r4,r4                 ;667
                  |L25.60|
00003c  f8b6005c          LDRH     r0,[r6,#0x5c]         ;667
000040  42a0              CMP      r0,r4                 ;667
000042  dce9              BGT      |L25.24|
;;;673            }
;;;674        }
;;;675    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;676    
                          ENDP

                  |L25.72|
                          DCD      ||.data||

                          AREA ||i.shellListItem||, CODE, READONLY, ALIGN=2

                  shellListItem PROC
;;;615     */
;;;616    void shellListItem(Shell *shell, ShellCommand *item)
000000  b5f8              PUSH     {r3-r7,lr}
;;;617    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;618        short spaceLength;
;;;619    
;;;620        spaceLength = 22 - shellWriteString(shell, shellGetCommandName(item));
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       shellGetCommandName
00000c  4601              MOV      r1,r0
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       shellWriteString
000014  f1c00016          RSB      r0,r0,#0x16
000018  b204              SXTH     r4,r0
;;;621        spaceLength = (spaceLength > 0) ? spaceLength : 4;
00001a  2c00              CMP      r4,#0
00001c  dc00              BGT      |L26.32|
00001e  2404              MOVS     r4,#4
                  |L26.32|
;;;622        do {
;;;623            shellWriteByte(shell, ' ');
000020  f05f0720          MOVS.W   r7,#0x20
                  |L26.36|
000024  f88d7000          STRB     r7,[sp,#0]
000028  6eaa              LDR      r2,[r5,#0x68]
00002a  2101              MOVS     r1,#1
00002c  4668              MOV      r0,sp
00002e  4790              BLX      r2
000030  1e64              SUBS     r4,r4,#1
;;;624        } while (--spaceLength);
000032  b224              SXTH     r4,r4
000034  2c00              CMP      r4,#0
000036  d1f5              BNE      |L26.36|
;;;625        if (item->attr.attrs.type <= SHELL_TYPE_CMD_FUNC)
000038  7870              LDRB     r0,[r6,#1]
00003a  f000010f          AND      r1,r0,#0xf
;;;626        {
;;;627            shellWriteString(shell, shellText[SHELL_TEXT_TYPE_CMD]);
00003e  4829              LDR      r0,|L26.228|
000040  2901              CMP      r1,#1                 ;625
000042  d801              BHI      |L26.72|
000044  6c01              LDR      r1,[r0,#0x40]  ; shellText
000046  e00c              B        |L26.98|
                  |L26.72|
;;;628        }
;;;629        else if (item->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
000048  2907              CMP      r1,#7
00004a  d801              BHI      |L26.80|
;;;630        {
;;;631            shellWriteString(shell, shellText[SHELL_TEXT_TYPE_VAR]);
00004c  6c41              LDR      r1,[r0,#0x44]  ; shellText
00004e  e008              B        |L26.98|
                  |L26.80|
;;;632        }
;;;633        else if (item->attr.attrs.type <= SHELL_TYPE_USER)
000050  2908              CMP      r1,#8
000052  d801              BHI      |L26.88|
;;;634        {
;;;635            shellWriteString(shell, shellText[SHELL_TEXT_TYPE_USER]);
000054  6c81              LDR      r1,[r0,#0x48]  ; shellText
000056  e004              B        |L26.98|
                  |L26.88|
;;;636        }
;;;637        else if (item->attr.attrs.type <= SHELL_TYPE_KEY)
000058  2909              CMP      r1,#9
00005a  d801              BHI      |L26.96|
;;;638        {
;;;639            shellWriteString(shell, shellText[SHELL_TEXT_TYPE_KEY]);
00005c  6cc1              LDR      r1,[r0,#0x4c]  ; shellText
00005e  e000              B        |L26.98|
                  |L26.96|
;;;640        }
;;;641        else
;;;642        {
;;;643            shellWriteString(shell, shellText[SHELL_TEXT_TYPE_NONE]);
000060  6d01              LDR      r1,[r0,#0x50]  ; shellText
                  |L26.98|
000062  4628              MOV      r0,r5                 ;639
000064  f7fffffe          BL       shellWriteString
;;;644        }
;;;645    #if SHELL_HELP_SHOW_PERMISSION == 1
;;;646        shellWriteString(shell, "  ");
000068  a11f              ADR      r1,|L26.232|
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       shellWriteString
;;;647        for (signed char i = 7; i >= 0; i--)
000070  2407              MOVS     r4,#7
000072  2701              MOVS     r7,#1
                  |L26.116|
;;;648        {
;;;649            shellWriteByte(shell, item->attr.attrs.permission & (1 << i) ? 'x' : '-');
000074  7830              LDRB     r0,[r6,#0]
000076  fa07f104          LSL      r1,r7,r4
00007a  4208              TST      r0,r1
00007c  d001              BEQ      |L26.130|
00007e  2078              MOVS     r0,#0x78
000080  e000              B        |L26.132|
                  |L26.130|
000082  202d              MOVS     r0,#0x2d
                  |L26.132|
000084  f88d0000          STRB     r0,[sp,#0]
000088  6eaa              LDR      r2,[r5,#0x68]
00008a  2101              MOVS     r1,#1
00008c  4668              MOV      r0,sp
00008e  4790              BLX      r2
000090  1e64              SUBS     r4,r4,#1
000092  b264              SXTB     r4,r4                 ;647
000094  2c00              CMP      r4,#0                 ;647
000096  daed              BGE      |L26.116|
;;;650        }
;;;651    #endif
;;;652        shellWriteString(shell, "  ");
000098  a113              ADR      r1,|L26.232|
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       shellWriteString
;;;653        shellWriteCommandDesc(shell, shellGetCommandDesc(item));
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       shellGetCommandDesc
0000a6  6eaa              LDR      r2,[r5,#0x68]
0000a8  4603              MOV      r3,r0
0000aa  2100              MOVS     r1,#0
0000ac  b1a2              CBZ      r2,|L26.216|
0000ae  e002              B        |L26.182|
                  |L26.176|
0000b0  1c49              ADDS     r1,r1,#1
0000b2  b289              UXTH     r1,r1
0000b4  1c40              ADDS     r0,r0,#1
                  |L26.182|
0000b6  7804              LDRB     r4,[r0,#0]
0000b8  b11c              CBZ      r4,|L26.194|
0000ba  2c0d              CMP      r4,#0xd
0000bc  d001              BEQ      |L26.194|
0000be  2c0a              CMP      r4,#0xa
0000c0  d1f6              BNE      |L26.176|
                  |L26.194|
0000c2  2924              CMP      r1,#0x24
0000c4  d906              BLS      |L26.212|
0000c6  2124              MOVS     r1,#0x24
0000c8  4618              MOV      r0,r3
0000ca  4790              BLX      r2
0000cc  2103              MOVS     r1,#3
0000ce  a007              ADR      r0,|L26.236|
0000d0  6eaa              LDR      r2,[r5,#0x68]
0000d2  e000              B        |L26.214|
                  |L26.212|
0000d4  4618              MOV      r0,r3
                  |L26.214|
0000d6  4790              BLX      r2
                  |L26.216|
;;;654        shellWriteString(shell, "\r\n");
0000d8  4628              MOV      r0,r5
0000da  e8bd40f8          POP      {r3-r7,lr}
0000de  a104              ADR      r1,|L26.240|
0000e0  f7ffbffe          B.W      shellWriteString
;;;655    }
;;;656    
                          ENDP

                  |L26.228|
                          DCD      ||.data||
                  |L26.232|
0000e8  202000            DCB      "  ",0
0000eb  00                DCB      0
                  |L26.236|
0000ec  2e2e2e00          DCB      "...",0
                  |L26.240|
0000f0  0d0a00            DCB      "\r\n",0
0000f3  00                DCB      0

                          AREA ||i.shellListKey||, CODE, READONLY, ALIGN=2

                  shellListKey PROC
;;;724     */
;;;725    void shellListKey(Shell *shell)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;726    {
000004  4606              MOV      r6,r0
;;;727        ShellCommand *base = (ShellCommand *)shell->commandList.base;
;;;728        shellWriteString(shell, shellText[SHELL_TEXT_KEY_LIST]);
000006  6d87              LDR      r7,[r0,#0x58]
000008  4810              LDR      r0,|L27.76|
00000a  6941              LDR      r1,[r0,#0x14]  ; shellText
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       shellWriteString
;;;729        for (short i = 0; i < shell->commandList.count; i++)
000012  2400              MOVS     r4,#0
000014  e014              B        |L27.64|
;;;730        {
;;;731            if (base[i].attr.attrs.type > SHELL_TYPE_USER
000016  bf00              NOP      
                  |L27.24|
000018  eb071504          ADD      r5,r7,r4,LSL #4
00001c  7868              LDRB     r0,[r5,#1]
00001e  f000000f          AND      r0,r0,#0xf
000022  2808              CMP      r0,#8
000024  d90a              BLS      |L27.60|
;;;732                && base[i].attr.attrs.type <= SHELL_TYPE_KEY
000026  2809              CMP      r0,#9
000028  d808              BHI      |L27.60|
00002a  4629              MOV      r1,r5
;;;733                && shellCheckPermission(shell, &base[i]) == 0)
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       shellCheckPermission
000032  b918              CBNZ     r0,|L27.60|
000034  4629              MOV      r1,r5
;;;734            {
;;;735                shellListItem(shell, &base[i]);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       shellListItem
                  |L27.60|
00003c  1c64              ADDS     r4,r4,#1
00003e  b224              SXTH     r4,r4                 ;729
                  |L27.64|
000040  f8b6005c          LDRH     r0,[r6,#0x5c]         ;729
000044  42a0              CMP      r0,r4                 ;729
000046  dce7              BGT      |L27.24|
;;;736            }
;;;737        }
;;;738    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;739    
                          ENDP

                  |L27.76|
                          DCD      ||.data||

                          AREA ||i.shellListUser||, CODE, READONLY, ALIGN=2

                  shellListUser PROC
;;;703     */
;;;704    void shellListUser(Shell *shell)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;705    {
000004  4606              MOV      r6,r0
;;;706        ShellCommand *base = (ShellCommand *)shell->commandList.base;
;;;707        shellWriteString(shell, shellText[SHELL_TEXT_USER_LIST]);
000006  6d87              LDR      r7,[r0,#0x58]
000008  4810              LDR      r0,|L28.76|
00000a  6901              LDR      r1,[r0,#0x10]  ; shellText
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       shellWriteString
;;;708        for (short i = 0; i < shell->commandList.count; i++)
000012  2400              MOVS     r4,#0
000014  e014              B        |L28.64|
;;;709        {
;;;710            if (base[i].attr.attrs.type > SHELL_TYPE_VAR_NODE
000016  bf00              NOP      
                  |L28.24|
000018  eb071504          ADD      r5,r7,r4,LSL #4
00001c  7868              LDRB     r0,[r5,#1]
00001e  f000000f          AND      r0,r0,#0xf
000022  2807              CMP      r0,#7
000024  d90a              BLS      |L28.60|
;;;711                && base[i].attr.attrs.type <= SHELL_TYPE_USER
000026  2808              CMP      r0,#8
000028  d808              BHI      |L28.60|
00002a  4629              MOV      r1,r5
;;;712                && shellCheckPermission(shell, &base[i]) == 0)
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       shellCheckPermission
000032  b918              CBNZ     r0,|L28.60|
000034  4629              MOV      r1,r5
;;;713            {
;;;714                shellListItem(shell, &base[i]);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       shellListItem
                  |L28.60|
00003c  1c64              ADDS     r4,r4,#1
00003e  b224              SXTH     r4,r4                 ;708
                  |L28.64|
000040  f8b6005c          LDRH     r0,[r6,#0x5c]         ;708
000044  42a0              CMP      r0,r4                 ;708
000046  dce7              BGT      |L28.24|
;;;715            }
;;;716        }
;;;717    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;718    
                          ENDP

                  |L28.76|
                          DCD      ||.data||

                          AREA ||i.shellListVar||, CODE, READONLY, ALIGN=2

                  shellListVar PROC
;;;682     */
;;;683    void shellListVar(Shell *shell)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;684    {
000004  4606              MOV      r6,r0
;;;685        ShellCommand *base = (ShellCommand *)shell->commandList.base;
;;;686        shellWriteString(shell, shellText[SHELL_TEXT_VAR_LIST]);
000006  6d87              LDR      r7,[r0,#0x58]
000008  4810              LDR      r0,|L29.76|
00000a  68c1              LDR      r1,[r0,#0xc]  ; shellText
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       shellWriteString
;;;687        for (short i = 0; i < shell->commandList.count; i++)
000012  2400              MOVS     r4,#0
000014  e013              B        |L29.62|
;;;688        {
;;;689            if (base[i].attr.attrs.type > SHELL_TYPE_CMD_FUNC
000016  bf00              NOP      
                  |L29.24|
000018  eb071504          ADD      r5,r7,r4,LSL #4
00001c  7868              LDRB     r0,[r5,#1]
00001e  f000000f          AND      r0,r0,#0xf
000022  1e80              SUBS     r0,r0,#2
000024  2805              CMP      r0,#5
000026  d808              BHI      |L29.58|
000028  4629              MOV      r1,r5
;;;690                && base[i].attr.attrs.type <= SHELL_TYPE_VAR_NODE
;;;691                && shellCheckPermission(shell, &base[i]) == 0)
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       shellCheckPermission
000030  b918              CBNZ     r0,|L29.58|
000032  4629              MOV      r1,r5
;;;692            {
;;;693                shellListItem(shell, &base[i]);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       shellListItem
                  |L29.58|
00003a  1c64              ADDS     r4,r4,#1
00003c  b224              SXTH     r4,r4                 ;687
                  |L29.62|
00003e  f8b6005c          LDRH     r0,[r6,#0x5c]         ;687
000042  42a0              CMP      r0,r4                 ;687
000044  dce8              BGT      |L29.24|
;;;694            }
;;;695        }
;;;696    }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;697    
                          ENDP

00004a  0000              DCW      0x0000
                  |L29.76|
                          DCD      ||.data||

                          AREA ||i.shellNormalInput||, CODE, READONLY, ALIGN=1

                  shellNormalInput PROC
;;;1387    */
;;;1388   void shellNormalInput(Shell *shell, char data)
000000  f8902060          LDRB     r2,[r0,#0x60]
;;;1389   {
;;;1390       shell->status.tabFlag = 0;
000004  f0220204          BIC      r2,r2,#4
000008  f8802060          STRB     r2,[r0,#0x60]
;;;1391       shellInsertByte(shell, data);
00000c  f7ffbffe          B.W      shellInsertByte
;;;1392   }
;;;1393   
                          ENDP


                          AREA ||i.shellParserParam||, CODE, READONLY, ALIGN=2

                  shellParserParam PROC
;;;890     */
;;;891    static void shellParserParam(Shell *shell)
000000  b570              PUSH     {r4-r6,lr}
;;;892    {
;;;893        unsigned char quotes = 0;
000002  2200              MOVS     r2,#0
;;;894        unsigned char record = 1;
000004  2301              MOVS     r3,#1
;;;895    
;;;896        for (short i = 0; i < SHELL_PARAMETER_MAX_NUMBER; i++)
000006  4611              MOV      r1,r2
000008  ea4f0402          MOV.W    r4,r2
                  |L31.12|
;;;897        {
;;;898            shell->parser.param[i] = NULL;
00000c  eb000581          ADD      r5,r0,r1,LSL #2
000010  1c49              ADDS     r1,r1,#1
000012  b209              SXTH     r1,r1                 ;896
000014  616c              STR      r4,[r5,#0x14]         ;896
000016  2908              CMP      r1,#8                 ;896
000018  dbf8              BLT      |L31.12|
;;;899        }
;;;900    
;;;901        shell->parser.paramCount = 0;
00001a  86c4              STRH     r4,[r0,#0x36]
;;;902        for (unsigned short i = 0; i < shell->parser.length; i++)
00001c  2100              MOVS     r1,#0
00001e  e027              B        |L31.112|
                  |L31.32|
;;;903        {
;;;904            if (quotes != 0
000020  b922              CBNZ     r2,|L31.44|
;;;905                || (shell->parser.buffer[i] != ' '
000022  6905              LDR      r5,[r0,#0x10]
000024  5c6e              LDRB     r6,[r5,r1]
000026  2e20              CMP      r6,#0x20
000028  d01e              BEQ      |L31.104|
;;;906                    && shell->parser.buffer[i] != 0))
00002a  b1ee              CBZ      r6,|L31.104|
                  |L31.44|
;;;907            {
;;;908                if (shell->parser.buffer[i] == '\"')
00002c  6905              LDR      r5,[r0,#0x10]
00002e  5c6e              LDRB     r6,[r5,r1]
000030  2e22              CMP      r6,#0x22
000032  d101              BNE      |L31.56|
;;;909                {
;;;910                    quotes = quotes ? 0 : 1;
000034  b11a              CBZ      r2,|L31.62|
000036  2200              MOVS     r2,#0
                  |L31.56|
;;;911                }
;;;912                if (record == 1)
000038  2b01              CMP      r3,#1
00003a  d002              BEQ      |L31.66|
00003c  e00b              B        |L31.86|
                  |L31.62|
00003e  2201              MOVS     r2,#1                 ;910
000040  e7fa              B        |L31.56|
                  |L31.66|
;;;913                {
;;;914                    if (shell->parser.paramCount < SHELL_PARAMETER_MAX_NUMBER)
000042  8ec3              LDRH     r3,[r0,#0x36]
000044  2b08              CMP      r3,#8
000046  d205              BCS      |L31.84|
;;;915                    {
;;;916                        shell->parser.param[shell->parser.paramCount++] =
000048  eb000683          ADD      r6,r0,r3,LSL #2
00004c  1c5b              ADDS     r3,r3,#1
00004e  440d              ADD      r5,r5,r1
000050  86c3              STRH     r3,[r0,#0x36]
000052  6175              STR      r5,[r6,#0x14]
                  |L31.84|
;;;917                            &(shell->parser.buffer[i]);
;;;918                    }
;;;919                    record = 0;
000054  2300              MOVS     r3,#0
                  |L31.86|
;;;920                }
;;;921                if (shell->parser.buffer[i] == '\\'
000056  6905              LDR      r5,[r0,#0x10]
000058  5c6e              LDRB     r6,[r5,r1]
00005a  2e5c              CMP      r6,#0x5c
00005c  d106              BNE      |L31.108|
;;;922                    && shell->parser.buffer[i + 1] != 0)
00005e  1c4e              ADDS     r6,r1,#1
000060  5dad              LDRB     r5,[r5,r6]
000062  b11d              CBZ      r5,|L31.108|
;;;923                {
;;;924                    i++;
000064  b2b1              UXTH     r1,r6
000066  e001              B        |L31.108|
                  |L31.104|
;;;925                }
;;;926            }
;;;927            else
;;;928            {
;;;929                shell->parser.buffer[i] = 0;
000068  546c              STRB     r4,[r5,r1]
;;;930                record = 1;
00006a  2301              MOVS     r3,#1
                  |L31.108|
00006c  1c49              ADDS     r1,r1,#1
00006e  b289              UXTH     r1,r1                 ;902
                  |L31.112|
000070  8985              LDRH     r5,[r0,#0xc]          ;902
000072  428d              CMP      r5,r1                 ;902
000074  d8d4              BHI      |L31.32|
;;;931            }
;;;932        }
;;;933    }
000076  bd70              POP      {r4-r6,pc}
;;;934    
                          ENDP


                          AREA ||i.shellPrint||, CODE, READONLY, ALIGN=1

                  shellPrint PROC
;;;375     */
;;;376    void shellPrint(Shell *shell, const char *fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;377    {
000002  b510              PUSH     {r4,lr}
000004  b0a0              SUB      sp,sp,#0x80
000006  0004              MOVS     r4,r0
000008  d009              BEQ      |L32.30|
;;;378        char buffer[SHELL_PRINT_BUFFER];
;;;379        va_list vargs;
;;;380    
;;;381        SHELL_ASSERT(shell, return);
;;;382    
;;;383        va_start(vargs, fmt);
00000a  ab24              ADD      r3,sp,#0x90
;;;384        vsnprintf(buffer, SHELL_PRINT_BUFFER - 1, fmt, vargs);
00000c  217f              MOVS     r1,#0x7f
00000e  4668              MOV      r0,sp
000010  9a23              LDR      r2,[sp,#0x8c]
000012  f7fffffe          BL       vsnprintf
;;;385        va_end(vargs);
;;;386        
;;;387        shellWriteString(shell, buffer);
000016  4669              MOV      r1,sp
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       shellWriteString
                  |L32.30|
;;;388    }
00001e  b020              ADD      sp,sp,#0x80
000020  bc10              POP      {r4}
000022  f85dfb14          LDR      pc,[sp],#0x14
;;;389    #endif
                          ENDP


                          AREA ||i.shellRemove||, CODE, READONLY, ALIGN=2

                  shellRemove PROC
;;;245     */
;;;246    void shellRemove(Shell *shell)
000000  4a07              LDR      r2,|L33.32|
;;;247    {
;;;248        for (short i = 0; i < SHELL_MAX_NUMBER; i++)
000002  2100              MOVS     r1,#0
                  |L33.4|
;;;249        {
;;;250            if (shellList[i] == shell)
000004  f8523021          LDR      r3,[r2,r1,LSL #2]
000008  4283              CMP      r3,r0
00000a  d103              BNE      |L33.20|
;;;251            {
;;;252                shellList[i] = NULL;
00000c  2000              MOVS     r0,#0
00000e  f8420021          STR      r0,[r2,r1,LSL #2]
;;;253                return;
;;;254            }
;;;255        }
;;;256    }
000012  4770              BX       lr
                  |L33.20|
000014  1c49              ADDS     r1,r1,#1
000016  b209              SXTH     r1,r1                 ;248
000018  2905              CMP      r1,#5                 ;248
00001a  dbf3              BLT      |L33.4|
00001c  4770              BX       lr
;;;257    
                          ENDP

00001e  0000              DCW      0x0000
                  |L33.32|
                          DCD      ||.bss||

                          AREA ||i.shellRight||, CODE, READONLY, ALIGN=1

                  shellRight PROC
;;;1473    */
;;;1474   void shellRight(Shell *shell)
000000  b508              PUSH     {r3,lr}
;;;1475   {
;;;1476       if (shell->parser.cursor < shell->parser.length)
000002  89c1              LDRH     r1,[r0,#0xe]
000004  8982              LDRH     r2,[r0,#0xc]
000006  4291              CMP      r1,r2
000008  d209              BCS      |L34.30|
;;;1477       {
;;;1478           shellWriteByte(shell, shell->parser.buffer[shell->parser.cursor++]);
00000a  6903              LDR      r3,[r0,#0x10]
00000c  1c4a              ADDS     r2,r1,#1
00000e  81c2              STRH     r2,[r0,#0xe]
000010  5c59              LDRB     r1,[r3,r1]
000012  f88d1000          STRB     r1,[sp,#0]
000016  6e82              LDR      r2,[r0,#0x68]
000018  2101              MOVS     r1,#1
00001a  4668              MOV      r0,sp
00001c  4790              BLX      r2
                  |L34.30|
;;;1479       }
;;;1480   }
00001e  bd08              POP      {r3,pc}
;;;1481   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0)|SHELL_CMD_ENABLE_UNCHECKED,
                          ENDP


                          AREA ||i.shellRun||, CODE, READONLY, ALIGN=2

                  shellRun PROC
;;;1927    */
;;;1928   int shellRun(Shell *shell, const char *cmd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1929   {
000004  0004              MOVS     r4,r0
000006  460d              MOV      r5,r1
;;;1930       SHELL_ASSERT(shell && cmd, return -1);
000008  f04f37ff          MOV      r7,#0xffffffff
00000c  d010              BEQ      |L35.48|
00000e  b17d              CBZ      r5,|L35.48|
;;;1931       char active = shell->status.isActive;
000010  f8940060          LDRB     r0,[r4,#0x60]
000014  f3c00640          UBFX     r6,r0,#1,#1
;;;1932       if (strlen(cmd) > shell->parser.bufferSize - 1)
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       strlen
00001e  8ea1              LDRH     r1,[r4,#0x34]
000020  1e49              SUBS     r1,r1,#1
000022  4288              CMP      r0,r1
000024  d907              BLS      |L35.54|
;;;1933       {
;;;1934           shellWriteString(shell, shellText[SHELL_TEXT_CMD_TOO_LONG]);
000026  480b              LDR      r0,|L35.84|
000028  6841              LDR      r1,[r0,#4]  ; shellText
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       shellWriteString
                  |L35.48|
000030  4638              MOV      r0,r7                 ;1930
                  |L35.50|
;;;1935           return -1;
;;;1936       }
;;;1937       else
;;;1938       {
;;;1939           shell->parser.length = shellStringCopy(shell->parser.buffer, (char *)cmd);
;;;1940           shellExec(shell);
;;;1941           shell->status.isActive = active;
;;;1942           return 0;
;;;1943       }
;;;1944   }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L35.54|
000036  4629              MOV      r1,r5                 ;1939
000038  6920              LDR      r0,[r4,#0x10]         ;1939
00003a  f7fffffe          BL       shellStringCopy
00003e  81a0              STRH     r0,[r4,#0xc]          ;1939
000040  4620              MOV      r0,r4                 ;1940
000042  f7fffffe          BL       shellExec
000046  f8140f60          LDRB     r0,[r4,#0x60]!        ;1941
00004a  f3660041          BFI      r0,r6,#1,#1           ;1941
00004e  7020              STRB     r0,[r4,#0]            ;1941
000050  2000              MOVS     r0,#0                 ;1942
000052  e7ee              B        |L35.50|
;;;1945   
                          ENDP

                  |L35.84|
                          DCD      ||.data||

                          AREA ||i.shellRunCommand||, CODE, READONLY, ALIGN=2

                  shellRunCommand PROC
;;;1183    */
;;;1184   unsigned int shellRunCommand(Shell *shell, ShellCommand *command)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1185   {
000004  4604              MOV      r4,r0
;;;1186       int returnValue = 0;
;;;1187       shell->status.isActive = 1;
000006  f8900060          LDRB     r0,[r0,#0x60]
00000a  460f              MOV      r7,r1                 ;1185
00000c  f0400002          ORR      r0,r0,#2
000010  f8840060          STRB     r0,[r4,#0x60]
;;;1188       if (command->attr.attrs.type == SHELL_TYPE_CMD_MAIN)
000014  7849              LDRB     r1,[r1,#1]
000016  2500              MOVS     r5,#0                 ;1186
000018  070a              LSLS     r2,r1,#28
;;;1189       {
;;;1190           shellRemoveParamQuotes(shell);
;;;1191           returnValue = command->data.cmd.function(shell->parser.paramCount,
00001a  f1040914          ADD      r9,r4,#0x14
00001e  d00b              BEQ      |L36.56|
;;;1192                                                    shell->parser.param);
;;;1193           if (!command->attr.attrs.disableReturn)
;;;1194           {
;;;1195               shellWriteReturnValue(shell, returnValue);
;;;1196           }
;;;1197       }
;;;1198       else if (command->attr.attrs.type == SHELL_TYPE_CMD_FUNC)
000020  f001000f          AND      r0,r1,#0xf
000024  2801              CMP      r0,#1
000026  d02a              BEQ      |L36.126|
;;;1199       {
;;;1200           returnValue = shellExtRun(shell,
;;;1201                                     command,
;;;1202                                     shell->parser.paramCount,
;;;1203                                     shell->parser.param);
;;;1204           if (!command->attr.attrs.disableReturn)
;;;1205           {
;;;1206               shellWriteReturnValue(shell, returnValue);
;;;1207           }
;;;1208       }
;;;1209       else if (command->attr.attrs.type >= SHELL_TYPE_VAR_INT
000028  1e81              SUBS     r1,r0,#2
00002a  2905              CMP      r1,#5
00002c  d836              BHI      |L36.156|
;;;1210           && command->attr.attrs.type <= SHELL_TYPE_VAR_NODE)
;;;1211       {
;;;1212           shellShowVar(shell, command);
00002e  4639              MOV      r1,r7
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       shellShowVar
000036  e037              B        |L36.168|
                  |L36.56|
000038  2500              MOVS     r5,#0
00003a  46a8              MOV      r8,r5
00003c  e017              B        |L36.110|
00003e  bf00              NOP                            ;1190
                  |L36.64|
000040  eb040685          ADD      r6,r4,r5,LSL #2       ;1190
000044  6970              LDR      r0,[r6,#0x14]         ;1190
000046  7801              LDRB     r1,[r0,#0]            ;1190
000048  2922              CMP      r1,#0x22              ;1190
00004a  d104              BNE      |L36.86|
00004c  f8808000          STRB     r8,[r0,#0]            ;1190
000050  6970              LDR      r0,[r6,#0x14]         ;1190
000052  1c40              ADDS     r0,r0,#1              ;1190
000054  6170              STR      r0,[r6,#0x14]         ;1190
                  |L36.86|
000056  f7fffffe          BL       strlen
00005a  b280              UXTH     r0,r0                 ;1190
00005c  6971              LDR      r1,[r6,#0x14]         ;1190
00005e  1e40              SUBS     r0,r0,#1              ;1190
000060  5c0a              LDRB     r2,[r1,r0]            ;1190
000062  2a22              CMP      r2,#0x22              ;1190
000064  d101              BNE      |L36.106|
000066  f8018000          STRB     r8,[r1,r0]            ;1190
                  |L36.106|
00006a  1c6d              ADDS     r5,r5,#1              ;1190
00006c  b2ad              UXTH     r5,r5                 ;1190
                  |L36.110|
00006e  8ee0              LDRH     r0,[r4,#0x36]         ;1190
000070  42a8              CMP      r0,r5                 ;1190
000072  d8e5              BHI      |L36.64|
000074  68ba              LDR      r2,[r7,#8]            ;1191
000076  8ee0              LDRH     r0,[r4,#0x36]         ;1191
000078  4649              MOV      r1,r9                 ;1191
00007a  4790              BLX      r2                    ;1191
00007c  e005              B        |L36.138|
                  |L36.126|
00007e  8ee2              LDRH     r2,[r4,#0x36]         ;1200
000080  464b              MOV      r3,r9                 ;1200
000082  4639              MOV      r1,r7                 ;1200
000084  4620              MOV      r0,r4                 ;1200
000086  f7fffffe          BL       shellExtRun
                  |L36.138|
00008a  4605              MOV      r5,r0                 ;1200
00008c  7878              LDRB     r0,[r7,#1]            ;1204
00008e  0680              LSLS     r0,r0,#26             ;1204
000090  d40a              BMI      |L36.168|
000092  4629              MOV      r1,r5                 ;1206
000094  4620              MOV      r0,r4                 ;1206
000096  f7fffffe          BL       shellWriteReturnValue
00009a  e005              B        |L36.168|
                  |L36.156|
;;;1213       }
;;;1214       else if (command->attr.attrs.type == SHELL_TYPE_USER)
00009c  2808              CMP      r0,#8
00009e  d103              BNE      |L36.168|
;;;1215       {
;;;1216           shellSetUser(shell, command);
0000a0  4639              MOV      r1,r7
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       shellSetUser
                  |L36.168|
;;;1217       }
;;;1218       shell->status.isActive = 0;
0000a8  f8140f60          LDRB     r0,[r4,#0x60]!
0000ac  f0200002          BIC      r0,r0,#2
0000b0  7020              STRB     r0,[r4,#0]
;;;1219   
;;;1220       return returnValue;
0000b2  4628              MOV      r0,r5
;;;1221   }
0000b4  e8bd87f0          POP      {r4-r10,pc}
;;;1222   
                          ENDP


                          AREA ||i.shellSeekCommand||, CODE, READONLY, ALIGN=2

                  shellSeekCommand PROC
;;;968     */
;;;969    ShellCommand* shellSeekCommand(Shell *shell,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;970                                   const char *cmd,
;;;971                                   ShellCommand *base,
;;;972                                   unsigned short compareLength)
;;;973    {
000004  4606              MOV      r6,r0
000006  468a              MOV      r10,r1
;;;974        const char *name;
;;;975        unsigned short count = shell->commandList.count -
000008  6db1              LDR      r1,[r6,#0x58]
00000a  f8b0005c          LDRH     r0,[r0,#0x5c]
00000e  1a51              SUBS     r1,r2,r1
000010  eba01011          SUB      r0,r0,r1,LSR #4
000014  4699              MOV      r9,r3                 ;973
000016  4615              MOV      r5,r2                 ;973
000018  b287              UXTH     r7,r0
;;;976            ((int)base - (int)shell->commandList.base) / sizeof(ShellCommand);
;;;977        for (unsigned short i = 0; i < count; i++)
00001a  2400              MOVS     r4,#0
00001c  e01b              B        |L37.86|
;;;978        {
;;;979            if (base[i].attr.attrs.type == SHELL_TYPE_KEY
00001e  bf00              NOP      
                  |L37.32|
000020  eb051804          ADD      r8,r5,r4,LSL #4
000024  f8980001          LDRB     r0,[r8,#1]
000028  f000000f          AND      r0,r0,#0xf
00002c  2809              CMP      r0,#9
00002e  d010              BEQ      |L37.82|
000030  4641              MOV      r1,r8
;;;980                || shellCheckPermission(shell, &base[i]) != 0)
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       shellCheckPermission
000038  b958              CBNZ     r0,|L37.82|
00003a  4640              MOV      r0,r8
;;;981            {
;;;982                continue;
;;;983            }
;;;984            name = shellGetCommandName(&base[i]);
00003c  f7fffffe          BL       shellGetCommandName
000040  4601              MOV      r1,r0
;;;985            if (!compareLength)
000042  f1b90000          SUBS     r0,r9,#0
000046  d00b              BEQ      |L37.96|
;;;986            {
;;;987                if (strcmp(cmd, name) == 0)
;;;988                {
;;;989                    return &base[i];
;;;990                }
;;;991            }
;;;992            else
;;;993            {
;;;994                if (strncmp(cmd, name, compareLength) == 0)
000048  4602              MOV      r2,r0
00004a  4650              MOV      r0,r10
00004c  f7fffffe          BL       strncmp
                  |L37.80|
000050  b150              CBZ      r0,|L37.104|
                  |L37.82|
000052  1c64              ADDS     r4,r4,#1
000054  b2a4              UXTH     r4,r4                 ;977
                  |L37.86|
000056  42bc              CMP      r4,r7                 ;977
000058  d3e2              BCC      |L37.32|
;;;995                {
;;;996                    return &base[i];
;;;997                }
;;;998            }
;;;999        }
;;;1000       return NULL;
00005a  2000              MOVS     r0,#0
                  |L37.92|
;;;1001   }
00005c  e8bd87f0          POP      {r4-r10,pc}
                  |L37.96|
000060  4650              MOV      r0,r10                ;987
000062  f7fffffe          BL       strcmp
000066  e7f3              B        |L37.80|
                  |L37.104|
000068  eb051004          ADD      r0,r5,r4,LSL #4       ;996
00006c  e7f6              B        |L37.92|
;;;1002   
                          ENDP


                          AREA ||i.shellSetUser||, CODE, READONLY, ALIGN=2

                  shellSetUser PROC
;;;1252    */
;;;1253   void shellSetUser(Shell *shell, const ShellCommand *user)
000000  b570              PUSH     {r4-r6,lr}
;;;1254   {
000002  4604              MOV      r4,r0
;;;1255       shell->info.user = user;
;;;1256       shell->status.isChecked = 
000004  6001              STR      r1,[r0,#0]
000006  6888              LDR      r0,[r1,#8]            ;1254
000008  460d              MOV      r5,r1                 ;1254
00000a  b300              CBZ      r0,|L38.78|
00000c  f7fffffe          BL       strlen
000010  b1e8              CBZ      r0,|L38.78|
000012  8ee0              LDRH     r0,[r4,#0x36]
000014  2802              CMP      r0,#2
000016  d304              BCC      |L38.34|
000018  69a1              LDR      r1,[r4,#0x18]
00001a  68a8              LDR      r0,[r5,#8]
00001c  f7fffffe          BL       strcmp
000020  b1a8              CBZ      r0,|L38.78|
                  |L38.34|
000022  f8940060          LDRB     r0,[r4,#0x60]
000026  f0200001          BIC      r0,r0,#1
00002a  bf00              NOP      
                  |L38.44|
;;;1257           ((user->data.user.password && strlen(user->data.user.password) != 0)
;;;1258               && (shell->parser.paramCount < 2
;;;1259                   || strcmp(user->data.user.password, shell->parser.param[1]) != 0))
;;;1260            ? 0 : 1;
;;;1261           
;;;1262   #if SHELL_CLS_WHEN_LOGIN == 1
;;;1263       shellWriteString(shell, shellText[SHELL_TEXT_CLEAR_CONSOLE]);
00002c  4d0b              LDR      r5,|L38.92|
00002e  f8840060          STRB     r0,[r4,#0x60]         ;1256
000032  4620              MOV      r0,r4
000034  6ba9              LDR      r1,[r5,#0x38]  ; shellText
000036  f7fffffe          BL       shellWriteString
;;;1264   #endif
;;;1265   #if SHELL_SHOW_INFO == 1
;;;1266       if (shell->status.isChecked)
00003a  f8940060          LDRB     r0,[r4,#0x60]
00003e  07c0              LSLS     r0,r0,#31
000040  d00a              BEQ      |L38.88|
;;;1267       {
;;;1268           shellWriteString(shell, shellText[SHELL_TEXT_INFO]);
000042  4620              MOV      r0,r4
000044  6829              LDR      r1,[r5,#0]  ; shellText
000046  e8bd4070          POP      {r4-r6,lr}
00004a  f7ffbffe          B.W      shellWriteString
                  |L38.78|
00004e  f8940060          LDRB     r0,[r4,#0x60]         ;1256
000052  f0400001          ORR      r0,r0,#1              ;1256
000056  e7e9              B        |L38.44|
                  |L38.88|
;;;1269       }
;;;1270   #endif
;;;1271   }
000058  bd70              POP      {r4-r6,pc}
;;;1272   
                          ENDP

00005a  0000              DCW      0x0000
                  |L38.92|
                          DCD      ||.data||

                          AREA ||i.shellSetVar||, CODE, READONLY, ALIGN=2

                  shellSetVar PROC
;;;1145    */
;;;1146   int shellSetVar(char *name, int value)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1147   {
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
;;;1148       Shell *shell = shellGetCurrent();
000008  f7fffffe          BL       shellGetCurrent
00000c  1e04              SUBS     r4,r0,#0
;;;1149       if (shell == NULL)
00000e  d016              BEQ      |L39.62|
;;;1150       {
;;;1151           return 0;
;;;1152       }
;;;1153       ShellCommand *command = shellSeekCommand(shell,
000010  2300              MOVS     r3,#0
000012  4639              MOV      r1,r7
000014  6da2              LDR      r2,[r4,#0x58]
000016  f7fffffe          BL       shellSeekCommand
;;;1154                                                name,
;;;1155                                                shell->commandList.base,
;;;1156                                                0);
;;;1157       if (!command)
;;;1158       {
;;;1159           shellWriteString(shell, shellText[SHELL_TEXT_VAR_NOT_FOUND]);
00001a  4d0e              LDR      r5,|L39.84|
00001c  0001              MOVS     r1,r0                 ;1153
00001e  d010              BEQ      |L39.66|
;;;1160           return 0;
;;;1161       }
;;;1162       if (command->attr.attrs.type < SHELL_TYPE_VAR_INT
000020  7848              LDRB     r0,[r1,#1]
000022  f000000f          AND      r0,r0,#0xf
000026  1e80              SUBS     r0,r0,#2
000028  2806              CMP      r0,#6
00002a  d30c              BCC      |L39.70|
;;;1163           || command->attr.attrs.type > SHELL_TYPE_VAR_NODE)
;;;1164       {
;;;1165           shellWriteString(shell, name);
00002c  4639              MOV      r1,r7
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       shellWriteString
;;;1166           shellWriteString(shell, shellText[SHELL_TEXT_NOT_VAR]);
000034  6a69              LDR      r1,[r5,#0x24]  ; shellText
                  |L39.54|
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       shellWriteString
;;;1167           return 0;
00003c  2000              MOVS     r0,#0
                  |L39.62|
;;;1168       }
;;;1169       return shellSetVarValue(shell, command, value);
;;;1170   }
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L39.66|
000042  6aa9              LDR      r1,[r5,#0x28]         ;1160  ; shellText
000044  e7f7              B        |L39.54|
                  |L39.70|
000046  4632              MOV      r2,r6                 ;1169
000048  4620              MOV      r0,r4                 ;1169
00004a  e8bd41f0          POP      {r4-r8,lr}            ;1169
00004e  f7ffbffe          B.W      shellSetVarValue
;;;1171   SHELL_EXPORT_CMD(
                          ENDP

000052  0000              DCW      0x0000
                  |L39.84|
                          DCD      ||.data||

                          AREA ||i.shellSetVarValue||, CODE, READONLY, ALIGN=2

                  shellSetVarValue PROC
;;;1048    */
;;;1049   int shellSetVarValue(Shell *shell, ShellCommand *command, int value)
000000  b570              PUSH     {r4-r6,lr}
;;;1050   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;1051       if (command->attr.attrs.readOnly)
000006  7849              LDRB     r1,[r1,#1]
;;;1052       {
;;;1053           shellWriteString(shell, shellText[SHELL_TEXT_VAR_READ_ONLY_CANNOT_MODIFY]);
000008  4818              LDR      r0,|L40.108|
00000a  064b              LSLS     r3,r1,#25             ;1051
00000c  d501              BPL      |L40.18|
00000e  6a01              LDR      r1,[r0,#0x20]  ; shellText
000010  e018              B        |L40.68|
                  |L40.18|
;;;1054       }
;;;1055       else
;;;1056       {
;;;1057           switch (command->attr.attrs.type)
000012  f001010f          AND      r1,r1,#0xf
000016  1e89              SUBS     r1,r1,#2
000018  2906              CMP      r1,#6
00001a  d221              BCS      |L40.96|
00001c  e8dff001          TBB      [pc,r1]
000020  0306090c          DCB      0x03,0x06,0x09,0x0c
000024  1116              DCB      0x11,0x16
;;;1058           {
;;;1059           case SHELL_TYPE_VAR_INT:
;;;1060               *((int *)(command->data.var.value)) = value;
000026  68a0              LDR      r0,[r4,#8]
;;;1061               break;
000028  6002              STR      r2,[r0,#0]
00002a  e019              B        |L40.96|
;;;1062           case SHELL_TYPE_VAR_SHORT:
;;;1063               *((short *)(command->data.var.value)) = value;
00002c  68a0              LDR      r0,[r4,#8]
00002e  8002              STRH     r2,[r0,#0]
;;;1064               break;
000030  e016              B        |L40.96|
;;;1065           case SHELL_TYPE_VAR_CHAR:
;;;1066               *((char *)(command->data.var.value)) = value;
000032  68a0              LDR      r0,[r4,#8]
000034  7002              STRB     r2,[r0,#0]
;;;1067               break;
000036  e013              B        |L40.96|
;;;1068           case SHELL_TYPE_VAR_STRING:
;;;1069               shellStringCopy(((char *)(command->data.var.value)), (char *)value);
000038  4611              MOV      r1,r2
00003a  68a0              LDR      r0,[r4,#8]
00003c  f7fffffe          BL       shellStringCopy
;;;1070               break;
000040  e00e              B        |L40.96|
;;;1071           case SHELL_TYPE_VAR_POINT:
;;;1072               shellWriteString(shell, shellText[SHELL_TEXT_POINT_CANNOT_MODIFY]);
000042  69c1              LDR      r1,[r0,#0x1c]  ; shellText
                  |L40.68|
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       shellWriteString
00004a  e009              B        |L40.96|
;;;1073               break;
;;;1074           case SHELL_TYPE_VAR_NODE:
;;;1075               if (((ShellNodeVarAttr *)command->data.var.value)->set)
00004c  68a0              LDR      r0,[r4,#8]
00004e  6883              LDR      r3,[r0,#8]
000050  b133              CBZ      r3,|L40.96|
;;;1076               {
;;;1077                   if (((ShellNodeVarAttr *)command->data.var.value)->var)
000052  6800              LDR      r0,[r0,#0]
000054  b110              CBZ      r0,|L40.92|
;;;1078                   {
;;;1079                       ((ShellNodeVarAttr *)command->data.var.value)
000056  4611              MOV      r1,r2
000058  4798              BLX      r3
00005a  e001              B        |L40.96|
                  |L40.92|
;;;1080                           ->set(((ShellNodeVarAttr *)command->data.var.value)->var, value);
;;;1081                   }
;;;1082                   else
;;;1083                   {
;;;1084                       ((ShellNodeVarAttr *)command->data.var.value)->set(value);
00005c  4610              MOV      r0,r2
00005e  4798              BLX      r3
                  |L40.96|
;;;1085                   }
;;;1086               }
;;;1087               break;
;;;1088           default:
;;;1089               break;
;;;1090           }
;;;1091       }
;;;1092       return shellShowVar(shell, command);
000060  4621              MOV      r1,r4
000062  4628              MOV      r0,r5
000064  e8bd4070          POP      {r4-r6,lr}
000068  f7ffbffe          B.W      shellShowVar
;;;1093   }
;;;1094   
                          ENDP

                  |L40.108|
                          DCD      ||.data||

                          AREA ||i.shellShowVar||, CODE, READONLY, ALIGN=2

                  shellShowVar PROC
;;;1102    */
;;;1103   static int shellShowVar(Shell *shell, ShellCommand *command)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1104   {
;;;1105       char buffer[12] = "00000000000";
000002  a223              ADR      r2,|L41.144|
000004  460c              MOV      r4,r1                 ;1104
000006  4606              MOV      r6,r0                 ;1104
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
;;;1106       int value = shellGetVarValue(shell, command);
00000e  4621              MOV      r1,r4
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       shellGetVarValue
000016  4605              MOV      r5,r0
;;;1107       
;;;1108       shellWriteString(shell, command->data.var.name);
000018  4630              MOV      r0,r6
00001a  6861              LDR      r1,[r4,#4]
00001c  f7fffffe          BL       shellWriteString
;;;1109       shellWriteString(shell, " = ");
000020  a11e              ADR      r1,|L41.156|
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       shellWriteString
;;;1110   
;;;1111       switch (command->attr.attrs.type)
000028  7860              LDRB     r0,[r4,#1]
00002a  f000000f          AND      r0,r0,#0xf
00002e  2805              CMP      r0,#5
000030  d023              BEQ      |L41.122|
;;;1112       {
;;;1113       case SHELL_TYPE_VAR_STRING:
;;;1114           shellWriteString(shell, "\"");
;;;1115           shellWriteString(shell, (char *)value);
;;;1116           shellWriteString(shell, "\"");
;;;1117           break;
;;;1118       // case SHELL_TYPE_VAR_INT:
;;;1119       // case SHELL_TYPE_VAR_SHORT:
;;;1120       // case SHELL_TYPE_VAR_CHAR:
;;;1121       // case SHELL_TYPE_VAR_POINT:
;;;1122       default:
;;;1123           shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
000032  4669              MOV      r1,sp
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       shellToDec
00003a  f1c0000b          RSB      r0,r0,#0xb
00003e  466c              MOV      r4,sp
000040  1901              ADDS     r1,r0,r4
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       shellWriteString
;;;1124           shellWriteString(shell, ", 0x");
000048  a115              ADR      r1,|L41.160|
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       shellWriteString
;;;1125           for (short i = 0; i < 11; i++)
000050  2100              MOVS     r1,#0
;;;1126           {
;;;1127               buffer[i] = '0';
000052  2030              MOVS     r0,#0x30
                  |L41.84|
000054  5460              STRB     r0,[r4,r1]
000056  1c49              ADDS     r1,r1,#1
000058  b209              SXTH     r1,r1                 ;1125
00005a  290b              CMP      r1,#0xb               ;1125
00005c  dbfa              BLT      |L41.84|
;;;1128           }
;;;1129           shellToHex(value, buffer);
00005e  4669              MOV      r1,sp
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       shellToHex
;;;1130           shellWriteString(shell, buffer);
000066  4669              MOV      r1,sp
                  |L41.104|
000068  4630              MOV      r0,r6                 ;1116
00006a  f7fffffe          BL       shellWriteString
;;;1131           break;
;;;1132       }
;;;1133   
;;;1134       shellWriteString(shell, "\r\n");
00006e  a10e              ADR      r1,|L41.168|
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       shellWriteString
;;;1135       return value;
000076  4628              MOV      r0,r5
;;;1136   }
000078  bdfe              POP      {r1-r7,pc}
                  |L41.122|
00007a  a10c              ADR      r1,|L41.172|
00007c  4630              MOV      r0,r6                 ;1114
00007e  f7fffffe          BL       shellWriteString
000082  4629              MOV      r1,r5                 ;1115
000084  4630              MOV      r0,r6                 ;1115
000086  f7fffffe          BL       shellWriteString
00008a  a108              ADR      r1,|L41.172|
00008c  e7ec              B        |L41.104|
;;;1137   
                          ENDP

00008e  0000              DCW      0x0000
                  |L41.144|
000090  30303030          DCB      "00000000000",0
000094  30303030
000098  30303000
                  |L41.156|
00009c  203d2000          DCB      " = ",0
                  |L41.160|
0000a0  2c203078          DCB      ", 0x",0
0000a4  00      
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L41.168|
0000a8  0d0a00            DCB      "\r\n",0
0000ab  00                DCB      0
                  |L41.172|
0000ac  2200              DCB      """",0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.shellStringCompare||, CODE, READONLY, ALIGN=1

                  shellStringCompare PROC
;;;532     */
;;;533    static unsigned short shellStringCompare(char* dest, char *src)
000000  b530              PUSH     {r4,r5,lr}
;;;534    {
000002  4604              MOV      r4,r0
;;;535        unsigned short match = 0;
000004  2000              MOVS     r0,#0
;;;536        unsigned short i = 0;
000006  4602              MOV      r2,r0
000008  e005              B        |L42.22|
                  |L42.10|
;;;537    
;;;538        while (*(dest +i) && *(src + i))
;;;539        {
;;;540            if (*(dest + i) != *(src +i))
00000a  42ab              CMP      r3,r5
00000c  d109              BNE      |L42.34|
00000e  1c40              ADDS     r0,r0,#1
;;;541            {
;;;542                break;
;;;543            }
;;;544            match ++;
000010  1c52              ADDS     r2,r2,#1
000012  b280              UXTH     r0,r0
;;;545            i++;
000014  b292              UXTH     r2,r2
                  |L42.22|
000016  5ca3              LDRB     r3,[r4,r2]            ;538
000018  2b00              CMP      r3,#0                 ;538
00001a  d002              BEQ      |L42.34|
00001c  5c8d              LDRB     r5,[r1,r2]            ;538
00001e  2d00              CMP      r5,#0                 ;538
000020  d1f3              BNE      |L42.10|
                  |L42.34|
;;;546        }
;;;547        return match;
;;;548    }
000022  bd30              POP      {r4,r5,pc}
;;;549    
                          ENDP


                          AREA ||i.shellStringCopy||, CODE, READONLY, ALIGN=1

                  shellStringCopy PROC
;;;512     */
;;;513    static unsigned short shellStringCopy(char *dest, char* src)
000000  4602              MOV      r2,r0
;;;514    {
;;;515        unsigned short count = 0;
000002  2000              MOVS     r0,#0
000004  e002              B        |L43.12|
                  |L43.6|
;;;516        while (*(src + count))
;;;517        {
;;;518            *(dest + count) = *(src + count);
000006  5413              STRB     r3,[r2,r0]
000008  1c40              ADDS     r0,r0,#1
;;;519            count++;
00000a  b280              UXTH     r0,r0
                  |L43.12|
00000c  5c0b              LDRB     r3,[r1,r0]            ;516
00000e  2b00              CMP      r3,#0                 ;516
000010  d1f9              BNE      |L43.6|
;;;520        }
;;;521        *(dest + count) = 0;
000012  2100              MOVS     r1,#0
000014  5411              STRB     r1,[r2,r0]
;;;522        return count;
;;;523    }
000016  4770              BX       lr
;;;524    
                          ENDP


                          AREA ||i.shellTab||, CODE, READONLY, ALIGN=2

                  shellTab PROC
;;;1506    */
;;;1507   void shellTab(Shell *shell)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1508   {
;;;1509       unsigned short maxMatch = shell->parser.bufferSize;
000004  f8b08034          LDRH     r8,[r0,#0x34]
;;;1510       unsigned short lastMatchIndex = 0;
000008  f04f0900          MOV      r9,#0
;;;1511       unsigned short matchNum = 0;
;;;1512       unsigned short length;
;;;1513   
;;;1514       if (shell->parser.length == 0)
00000c  8981              LDRH     r1,[r0,#0xc]
00000e  4604              MOV      r4,r0                 ;1508
000010  464d              MOV      r5,r9                 ;1511
000012  b131              CBZ      r1,|L44.34|
;;;1515       {
;;;1516           shellListAll(shell);
;;;1517           shellWritePrompt(shell, 1);
;;;1518       }
;;;1519       else if (shell->parser.length > 0)
;;;1520       {
;;;1521           shell->parser.buffer[shell->parser.length] = 0;
000014  6920              LDR      r0,[r4,#0x10]
000016  46ca              MOV      r10,r9
;;;1522           ShellCommand *base = (ShellCommand *)shell->commandList.base;
;;;1523           for (short i = 0; i < shell->commandList.count; i++)
000018  4656              MOV      r6,r10
00001a  f800a001          STRB     r10,[r0,r1]           ;1521
00001e  6da7              LDR      r7,[r4,#0x58]
000020  e03b              B        |L44.154|
                  |L44.34|
000022  4620              MOV      r0,r4                 ;1516
000024  f7fffffe          BL       shellListCommand
000028  4620              MOV      r0,r4                 ;1517
00002a  e8bd5ff0          POP      {r4-r12,lr}           ;1517
00002e  2101              MOVS     r1,#1                 ;1517
000030  f7ffbffe          B.W      shellWritePrompt
                  |L44.52|
;;;1524           {
;;;1525               if (shellCheckPermission(shell, &base[i]) == 0
000034  eb071106          ADD      r1,r7,r6,LSL #4
000038  468b              MOV      r11,r1
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       shellCheckPermission
000040  bb48              CBNZ     r0,|L44.150|
000042  4658              MOV      r0,r11
;;;1526                   && shellStringCompare(shell->parser.buffer,
000044  f7fffffe          BL       shellGetCommandName
000048  4601              MOV      r1,r0
00004a  6920              LDR      r0,[r4,#0x10]
00004c  f7fffffe          BL       shellStringCompare
000050  89a1              LDRH     r1,[r4,#0xc]
000052  4288              CMP      r0,r1
000054  d11f              BNE      |L44.150|
;;;1527                                      (char *)shellGetCommandName(&base[i]))
;;;1528                           == shell->parser.length)
;;;1529               {
;;;1530                   if (matchNum != 0)
000056  b1d5              CBZ      r5,|L44.142|
;;;1531                   {
;;;1532                       if (matchNum == 1)
000058  2d01              CMP      r5,#1
00005a  d103              BNE      |L44.100|
;;;1533                       {
;;;1534                           shellWriteString(shell, "\r\n");
00005c  a126              ADR      r1,|L44.248|
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       shellWriteString
                  |L44.100|
;;;1535                       }
;;;1536                       shellListItem(shell, &base[lastMatchIndex]);
000064  eb071909          ADD      r9,r7,r9,LSL #4
000068  4649              MOV      r1,r9
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       shellListItem
000070  4658              MOV      r0,r11
;;;1537                       length = 
000072  f7fffffe          BL       shellGetCommandName
000076  4683              MOV      r11,r0
000078  4648              MOV      r0,r9
00007a  f7fffffe          BL       shellGetCommandName
00007e  4659              MOV      r1,r11
000080  f7fffffe          BL       shellStringCompare
;;;1538                           shellStringCompare((char *)shellGetCommandName(&base[lastMatchIndex]),
;;;1539                                              (char *)shellGetCommandName(&base[i]));
;;;1540                       maxMatch = (maxMatch > length) ? length : maxMatch;
000084  4641              MOV      r1,r8
000086  4580              CMP      r8,r0
000088  d800              BHI      |L44.140|
00008a  4608              MOV      r0,r1
                  |L44.140|
00008c  4680              MOV      r8,r0
                  |L44.142|
;;;1541                   }
;;;1542                   lastMatchIndex = i;
00008e  1c6d              ADDS     r5,r5,#1
000090  fa1ff986          UXTH     r9,r6
;;;1543                   matchNum++;
000094  b2ad              UXTH     r5,r5
                  |L44.150|
000096  1c76              ADDS     r6,r6,#1
000098  b236              SXTH     r6,r6                 ;1523
                  |L44.154|
00009a  f8b4005c          LDRH     r0,[r4,#0x5c]         ;1523
00009e  42b0              CMP      r0,r6                 ;1523
0000a0  dcc8              BGT      |L44.52|
;;;1544               }
;;;1545           }
;;;1546           if (matchNum == 0)
0000a2  2d00              CMP      r5,#0
0000a4  d026              BEQ      |L44.244|
;;;1547           {
;;;1548               return;
;;;1549           }
;;;1550           if (matchNum == 1)
0000a6  2d01              CMP      r5,#1
0000a8  d102              BNE      |L44.176|
;;;1551           {
;;;1552               shellClearCommandLine(shell);
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       shellClearCommandLine
                  |L44.176|
;;;1553           }
;;;1554           if (matchNum != 0)
;;;1555           {
;;;1556               shell->parser.length = 
0000b0  eb071009          ADD      r0,r7,r9,LSL #4
0000b4  4606              MOV      r6,r0
0000b6  f7fffffe          BL       shellGetCommandName
0000ba  4601              MOV      r1,r0
0000bc  6920              LDR      r0,[r4,#0x10]
0000be  f7fffffe          BL       shellStringCopy
0000c2  81a0              STRH     r0,[r4,#0xc]
;;;1557                   shellStringCopy(shell->parser.buffer,
;;;1558                                   (char *)shellGetCommandName(&base[lastMatchIndex]));
;;;1559           }
;;;1560           if (matchNum > 1)
0000c4  2d01              CMP      r5,#1
0000c6  d909              BLS      |L44.220|
0000c8  4631              MOV      r1,r6                 ;1556
;;;1561           {
;;;1562               shellListItem(shell, &base[lastMatchIndex]);
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       shellListItem
;;;1563               shellWritePrompt(shell, 1);
0000d0  2101              MOVS     r1,#1
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       shellWritePrompt
;;;1564               shell->parser.length = maxMatch;
0000d8  f8a4800c          STRH     r8,[r4,#0xc]
                  |L44.220|
;;;1565           }
;;;1566           shell->parser.buffer[shell->parser.length] = 0;
0000dc  89a2              LDRH     r2,[r4,#0xc]
0000de  6921              LDR      r1,[r4,#0x10]
0000e0  f801a002          STRB     r10,[r1,r2]
;;;1567           shell->parser.cursor = shell->parser.length;
0000e4  89a0              LDRH     r0,[r4,#0xc]
0000e6  81e0              STRH     r0,[r4,#0xe]
;;;1568           shellWriteString(shell, shell->parser.buffer);
0000e8  4620              MOV      r0,r4
0000ea  6921              LDR      r1,[r4,#0x10]
0000ec  e8bd5ff0          POP      {r4-r12,lr}
0000f0  f7ffbffe          B.W      shellWriteString
                  |L44.244|
;;;1569       }
;;;1570   
;;;1571       if (SHELL_GET_TICK())
;;;1572       {
;;;1573           if (matchNum == 1
;;;1574               && shell->status.tabFlag
;;;1575               && SHELL_GET_TICK() - shell->info.activeTime < SHELL_DOUBLE_CLICK_TIME)
;;;1576           {
;;;1577           #if SHELL_QUICK_HELP == 1
;;;1578               shellWriteString(shell, "\r\n");
;;;1579               shellWriteCommandHelp(shell, shell->parser.buffer);
;;;1580               shellWritePrompt(shell, 1);
;;;1581               shellWriteString(shell, shell->parser.buffer);
;;;1582           #else
;;;1583               shellClearCommandLine(shell);
;;;1584               for (short i = shell->parser.length; i >= 0; i--)
;;;1585               {
;;;1586                   shell->parser.buffer[i + 5] = shell->parser.buffer[i];
;;;1587               }
;;;1588               shellStringCopy(shell->parser.buffer, "help");
;;;1589               shell->parser.buffer[4] = ' ';
;;;1590               shell->parser.length += 5;
;;;1591               shell->parser.cursor = shell->parser.length;
;;;1592               shellWriteString(shell, shell->parser.buffer);
;;;1593           #endif
;;;1594           }
;;;1595           else
;;;1596           {
;;;1597               shell->status.tabFlag = 1;
;;;1598           }
;;;1599       }
;;;1600   }
0000f4  e8bd9ff0          POP      {r4-r12,pc}
;;;1601   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0), 0x09000000, shellTab, tab);
                          ENDP

                  |L44.248|
0000f8  0d0a00            DCB      "\r\n",0
0000fb  00                DCB      0

                          AREA ||i.shellTask||, CODE, READONLY, ALIGN=1

                  shellTask PROC
;;;1822    */
;;;1823   void shellTask(void *param)
000000  b538              PUSH     {r3-r5,lr}
;;;1824   {
000002  6e42              LDR      r2,[r0,#0x64]
;;;1825       Shell *shell = (Shell *)param;
000004  4604              MOV      r4,r0
000006  2a00              CMP      r2,#0                 ;1824
000008  d009              BEQ      |L45.30|
;;;1826       char data;
;;;1827   #if SHELL_TASK_WHILE == 1
;;;1828       while(1)
;;;1829       {
;;;1830   #endif
;;;1831           if (shell->read && shell->read(&data, 1) == 1)
00000a  2101              MOVS     r1,#1
00000c  4668              MOV      r0,sp
00000e  4790              BLX      r2
000010  2801              CMP      r0,#1
000012  d104              BNE      |L45.30|
;;;1832           {
;;;1833               shellHandler(shell, data);
000014  f89d1000          LDRB     r1,[sp,#0]
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       shellHandler
                  |L45.30|
;;;1834           }
;;;1835   #if SHELL_TASK_WHILE == 1
;;;1836       }
;;;1837   #endif
;;;1838   }
00001e  bd38              POP      {r3-r5,pc}
;;;1839   
                          ENDP


                          AREA ||i.shellToDec||, CODE, READONLY, ALIGN=2

                  shellToDec PROC
;;;480     */
;;;481    signed char shellToDec(int value, char *buffer)
000000  b530              PUSH     {r4,r5,lr}
;;;482    {
;;;483        unsigned char i = 11;
000002  220b              MOVS     r2,#0xb
;;;484        int v = value;
000004  1e03              SUBS     r3,r0,#0
000006  da00              BGE      |L46.10|
;;;485        if (value < 0)
;;;486        {
;;;487            v = -value;
000008  4243              RSBS     r3,r0,#0
                  |L46.10|
;;;488        }
;;;489        buffer[11] = 0;
00000a  2400              MOVS     r4,#0
00000c  72cc              STRB     r4,[r1,#0xb]
;;;490        while (v)
;;;491        {
;;;492            buffer[--i] = v % 10 + 48;
00000e  240a              MOVS     r4,#0xa
000010  e00a              B        |L46.40|
000012  bf00              NOP      
                  |L46.20|
000014  fb93f5f4          SDIV     r5,r3,r4
000018  fb043515          MLS      r5,r4,r5,r3
;;;493            v /= 10;
00001c  fb93f3f4          SDIV     r3,r3,r4
000020  1e52              SUBS     r2,r2,#1              ;492
000022  b2d2              UXTB     r2,r2                 ;492
000024  3530              ADDS     r5,r5,#0x30           ;492
000026  548d              STRB     r5,[r1,r2]            ;492
                  |L46.40|
000028  2b00              CMP      r3,#0                 ;490
00002a  d1f3              BNE      |L46.20|
;;;494        }
;;;495        if (value < 0)
00002c  2800              CMP      r0,#0
00002e  da02              BGE      |L46.54|
;;;496        {
;;;497            buffer[--i] = '-';
000030  f04f002d          MOV      r0,#0x2d
000034  e002              B        |L46.60|
                  |L46.54|
;;;498        }
;;;499        if (value == 0) {
000036  d105              BNE      |L46.68|
;;;500            buffer[--i] = '0';
000038  f04f0030          MOV      r0,#0x30
                  |L46.60|
00003c  f1a20201          SUB      r2,r2,#1
000040  b2d2              UXTB     r2,r2                 ;497
000042  5488              STRB     r0,[r1,r2]            ;497
                  |L46.68|
;;;501        }
;;;502        return 11 - i;
000044  f1c2000b          RSB      r0,r2,#0xb
000048  b240              SXTB     r0,r0
;;;503    }
00004a  bd30              POP      {r4,r5,pc}
;;;504    
                          ENDP


                          AREA ||i.shellToHex||, CODE, READONLY, ALIGN=1

                  shellToHex PROC
;;;457     */
;;;458    signed char shellToHex(unsigned int value, char *buffer)
000000  2208              MOVS     r2,#8
;;;459    {
;;;460        char byte;
;;;461        unsigned char i = 8;
;;;462        buffer[8] = 0;
000002  2300              MOVS     r3,#0
000004  720b              STRB     r3,[r1,#8]
000006  e00a              B        |L47.30|
                  |L47.8|
;;;463        while (value)
;;;464        {
;;;465            byte = value & 0x0000000F;
000008  f000030f          AND      r3,r0,#0xf
;;;466            buffer[--i] = (byte > 9) ? (byte + 87) : (byte + 48);
00000c  2b09              CMP      r3,#9
00000e  d901              BLS      |L47.20|
000010  3357              ADDS     r3,r3,#0x57
000012  e000              B        |L47.22|
                  |L47.20|
000014  3330              ADDS     r3,r3,#0x30
                  |L47.22|
000016  1e52              SUBS     r2,r2,#1
000018  b2d2              UXTB     r2,r2
;;;467            value >>= 4;
00001a  0900              LSRS     r0,r0,#4
00001c  548b              STRB     r3,[r1,r2]            ;466
                  |L47.30|
00001e  2800              CMP      r0,#0                 ;463
000020  d1f2              BNE      |L47.8|
;;;468        }
;;;469        return 8 - i;
000022  f1c20008          RSB      r0,r2,#8
000026  b240              SXTB     r0,r0
;;;470    }
000028  4770              BX       lr
;;;471    
                          ENDP


                          AREA ||i.shellUp||, CODE, READONLY, ALIGN=1

                  shellUp PROC
;;;1448    */
;;;1449   void shellUp(Shell *shell)
000000  2101              MOVS     r1,#1
;;;1450   {
;;;1451       shellHistory(shell, 1);
000002  f7ffbffe          B.W      shellHistory
;;;1452   }
;;;1453   SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(0), 0x1B5B4100, shellUp, up);
                          ENDP


                          AREA ||i.shellUsers||, CODE, READONLY, ALIGN=1

                  shellUsers PROC
;;;1843    */
;;;1844   void shellUsers(void)
000000  b510              PUSH     {r4,lr}
;;;1845   {
;;;1846       Shell *shell = shellGetCurrent();
000002  f7fffffe          BL       shellGetCurrent
;;;1847       if (shell)
000006  2800              CMP      r0,#0
000008  d003              BEQ      |L49.18|
;;;1848       {
;;;1849           shellListUser(shell);
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      shellListUser
                  |L49.18|
;;;1850       }
;;;1851   }
000012  bd10              POP      {r4,pc}
;;;1852   SHELL_EXPORT_CMD(
                          ENDP


                          AREA ||i.shellVars||, CODE, READONLY, ALIGN=1

                  shellVars PROC
;;;1875    */
;;;1876   void shellVars(void)
000000  b510              PUSH     {r4,lr}
;;;1877   {
;;;1878       Shell *shell = shellGetCurrent();
000002  f7fffffe          BL       shellGetCurrent
;;;1879       if (shell)
000006  2800              CMP      r0,#0
000008  d003              BEQ      |L50.18|
;;;1880       {
;;;1881           shellListVar(shell);
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      shellListVar
                  |L50.18|
;;;1882       }
;;;1883   }
000012  bd10              POP      {r4,pc}
;;;1884   SHELL_EXPORT_CMD(
                          ENDP


                          AREA ||i.shellWriteCommandHelp||, CODE, READONLY, ALIGN=2

                  shellWriteCommandHelp PROC
;;;1660    */
;;;1661   static void shellWriteCommandHelp(Shell *shell, char *cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;1662   {
000002  4605              MOV      r5,r0
;;;1663       ShellCommand *command = shellSeekCommand(shell,
000004  2300              MOVS     r3,#0
000006  6d82              LDR      r2,[r0,#0x58]
000008  f7fffffe          BL       shellSeekCommand
00000c  0004              MOVS     r4,r0
;;;1664                                                cmd,
;;;1665                                                shell->commandList.base,
;;;1666                                                0);
;;;1667       if (command)
;;;1668       {
;;;1669           shellWriteString(shell, shellText[SHELL_TEXT_HELP_HEADER]);
00000e  4810              LDR      r0,|L51.80|
000010  d017              BEQ      |L51.66|
000012  6ac1              LDR      r1,[r0,#0x2c]  ; shellText
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       shellWriteString
;;;1670           shellWriteString(shell, shellGetCommandName(command));
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       shellGetCommandName
000020  4601              MOV      r1,r0
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       shellWriteString
;;;1671           shellWriteString(shell, "\r\n");
000028  a10a              ADR      r1,|L51.84|
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       shellWriteString
;;;1672           shellWriteString(shell, shellGetCommandDesc(command));
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       shellGetCommandDesc
000036  4601              MOV      r1,r0
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       shellWriteString
;;;1673           shellWriteString(shell, "\r\n");
00003e  a105              ADR      r1,|L51.84|
000040  e000              B        |L51.68|
                  |L51.66|
;;;1674       }
;;;1675       else
;;;1676       {
;;;1677           shellWriteString(shell, shellText[SHELL_TEXT_CMD_NOT_FOUND]);
000042  6981              LDR      r1,[r0,#0x18]  ; shellText
                  |L51.68|
000044  4628              MOV      r0,r5
000046  e8bd4070          POP      {r4-r6,lr}
00004a  f7ffbffe          B.W      shellWriteString
;;;1678       }
;;;1679   }
;;;1680   
                          ENDP

00004e  0000              DCW      0x0000
                  |L51.80|
                          DCD      ||.data||
                  |L51.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0

                          AREA ||i.shellWritePrompt||, CODE, READONLY, ALIGN=2

                  shellWritePrompt PROC
;;;347     */
;;;348    static void shellWritePrompt(Shell *shell, unsigned char newline)
000000  b510              PUSH     {r4,lr}
;;;349    {
000002  4604              MOV      r4,r0
;;;350        if (shell->status.isChecked)
000004  f8900060          LDRB     r0,[r0,#0x60]
000008  07c0              LSLS     r0,r0,#31
00000a  d019              BEQ      |L52.64|
;;;351        {
;;;352            if (newline)
00000c  b119              CBZ      r1,|L52.22|
;;;353            {
;;;354                shellWriteString(shell, "\r\n");
00000e  a10e              ADR      r1,|L52.72|
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       shellWriteString
                  |L52.22|
;;;355            }
;;;356            shellWriteString(shell, shell->info.user->data.user.name);
000016  6820              LDR      r0,[r4,#0]
000018  6841              LDR      r1,[r0,#4]
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       shellWriteString
;;;357            shellWriteString(shell, ":");
000020  a10a              ADR      r1,|L52.76|
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       shellWriteString
;;;358            shellWriteString(shell, shell->info.path ? shell->info.path : "/");
000028  68a1              LDR      r1,[r4,#8]
00002a  b901              CBNZ     r1,|L52.46|
00002c  a108              ADR      r1,|L52.80|
                  |L52.46|
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       shellWriteString
;;;359            shellWriteString(shell, "$ ");
000034  a107              ADR      r1,|L52.84|
                  |L52.54|
;;;360        }
;;;361        else
;;;362        {
;;;363            shellWriteString(shell, shellText[SHELL_TEXT_PASSWORD_HINT]);
000036  4620              MOV      r0,r4
000038  e8bd4010          POP      {r4,lr}
00003c  f7ffbffe          B.W      shellWriteString
                  |L52.64|
000040  4805              LDR      r0,|L52.88|
000042  6b01              LDR      r1,[r0,#0x30]  ; shellText
000044  e7f7              B        |L52.54|
;;;364        }
;;;365    }
;;;366    
                          ENDP

000046  0000              DCW      0x0000
                  |L52.72|
000048  0d0a00            DCB      "\r\n",0
00004b  00                DCB      0
                  |L52.76|
00004c  3a00              DCB      ":",0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L52.80|
000050  2f00              DCB      "/",0
000052  00                DCB      0
000053  00                DCB      0
                  |L52.84|
000054  242000            DCB      "$$ ",0
000057  00                DCB      0
                  |L52.88|
                          DCD      ||.data||

                          AREA ||i.shellWriteReturnValue||, CODE, READONLY, ALIGN=2

                  shellWriteReturnValue PROC
;;;1279    */
;;;1280   static void shellWriteReturnValue(Shell *shell, int value)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1281   {
;;;1282       char buffer[12] = "00000000000";
000002  a216              ADR      r2,|L53.92|
000004  460d              MOV      r5,r1                 ;1281
000006  4606              MOV      r6,r0                 ;1281
000008  ca07              LDM      r2,{r0-r2}
00000a  e88d0007          STM      sp,{r0-r2}
;;;1283       shellWriteString(shell, "Return: ");
00000e  a116              ADR      r1,|L53.104|
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       shellWriteString
;;;1284       shellWriteString(shell, &buffer[11 - shellToDec(value, buffer)]);
000016  4669              MOV      r1,sp
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       shellToDec
00001e  f1c0000b          RSB      r0,r0,#0xb
000022  466c              MOV      r4,sp
000024  1901              ADDS     r1,r0,r4
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       shellWriteString
;;;1285       shellWriteString(shell, ", 0x");
00002c  a111              ADR      r1,|L53.116|
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       shellWriteString
;;;1286       for (short i = 0; i < 11; i++)
000034  2200              MOVS     r2,#0
;;;1287       {
;;;1288           buffer[i] = '0';
000036  2030              MOVS     r0,#0x30
                  |L53.56|
000038  54a0              STRB     r0,[r4,r2]
00003a  1c52              ADDS     r2,r2,#1
00003c  b212              SXTH     r2,r2                 ;1286
00003e  2a0b              CMP      r2,#0xb               ;1286
000040  dbfa              BLT      |L53.56|
;;;1289       }
;;;1290       shellToHex(value, buffer);
000042  4669              MOV      r1,sp
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       shellToHex
;;;1291       shellWriteString(shell, buffer);
00004a  4669              MOV      r1,sp
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       shellWriteString
;;;1292       shellWriteString(shell, "\r\n");
000052  a10a              ADR      r1,|L53.124|
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       shellWriteString
;;;1293   #if SHELL_KEEP_RETURN_VALUE == 1
;;;1294       shell->info.retVal = value;
;;;1295   #endif
;;;1296   }
00005a  bdfe              POP      {r1-r7,pc}
;;;1297   
                          ENDP

                  |L53.92|
00005c  30303030          DCB      "00000000000",0
000060  30303030
000064  30303000
                  |L53.104|
000068  52657475          DCB      "Return: ",0
00006c  726e3a20
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L53.116|
000074  2c203078          DCB      ", 0x",0
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L53.124|
00007c  0d0a00            DCB      "\r\n",0
00007f  00                DCB      0

                          AREA ||i.shellWriteString||, CODE, READONLY, ALIGN=1

                  shellWriteString PROC
;;;295     */
;;;296    unsigned short shellWriteString(Shell *shell, const char *string)
000000  b510              PUSH     {r4,lr}
;;;297    {
000002  460b              MOV      r3,r1
000004  6e84              LDR      r4,[r0,#0x68]
;;;298        unsigned short count = 0;
000006  2100              MOVS     r1,#0
;;;299        const char *p = string;
000008  461a              MOV      r2,r3
00000a  b91c              CBNZ     r4,|L54.20|
;;;300        SHELL_ASSERT(shell->write, return 0);
00000c  2000              MOVS     r0,#0
;;;301        while(*p++)
;;;302        {
;;;303            count ++;
;;;304        }
;;;305        return shell->write((char *)string, count);
;;;306    }
00000e  bd10              POP      {r4,pc}
                  |L54.16|
000010  1c49              ADDS     r1,r1,#1
000012  b289              UXTH     r1,r1                 ;303
                  |L54.20|
000014  f8120b01          LDRB     r0,[r2],#1            ;301
000018  2800              CMP      r0,#0                 ;301
00001a  d1f9              BNE      |L54.16|
00001c  4618              MOV      r0,r3                 ;305
00001e  47a0              BLX      r4                    ;305
000020  b280              UXTH     r0,r0                 ;305
000022  bd10              POP      {r4,pc}
;;;307    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  shellList
                          %        20
                  buffer
                          %        9

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  shellCmdDefaultUser
000000  6c657474          DCB      0x6c,0x65,0x74,0x74
000004  657200            DCB      0x65,0x72,0x00

                          AREA ||area_number.59||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.constdata||
                  shellPasswordDefaultUser
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.constdata||
                  shellDesDefaultUser
000000  64656661          DCB      0x64,0x65,0x66,0x61
000004  756c7420          DCB      0x75,0x6c,0x74,0x20
000008  75736572          DCB      0x75,0x73,0x65,0x72
00000c  00                DCB      0x00

                          AREA ||area_number.61||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.constdata||
                  shellCmdsetVar
000000  73657456          DCB      0x73,0x65,0x74,0x56
000004  617200            DCB      0x61,0x72,0x00

                          AREA ||area_number.62||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.62||, ||.constdata||
                  shellDescsetVar
000000  73657420          DCB      0x73,0x65,0x74,0x20
000004  76617200          DCB      0x76,0x61,0x72,0x00

                          AREA ||area_number.63||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.63||, ||.constdata||
                  shellDesc0x1B5B4100
000000  757000            DCB      0x75,0x70,0x00

                          AREA ||area_number.64||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.64||, ||.constdata||
                  shellDesc0x1B5B4200
000000  646f776e          DCB      0x64,0x6f,0x77,0x6e
000004  00                DCB      0x00

                          AREA ||area_number.65||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.65||, ||.constdata||
                  shellDesc0x1B5B4300
000000  72696768          DCB      0x72,0x69,0x67,0x68
000004  7400              DCB      0x74,0x00

                          AREA ||area_number.66||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.66||, ||.constdata||
                  shellDesc0x1B5B4400
000000  6c656674          DCB      0x6c,0x65,0x66,0x74
000004  00                DCB      0x00

                          AREA ||area_number.67||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.constdata||
                  shellDesc0x09000000
000000  74616200          DCB      0x74,0x61,0x62,0x00

                          AREA ||area_number.68||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.68||, ||.constdata||
                  shellDesc0x08000000
000000  6261636b          DCB      0x62,0x61,0x63,0x6b
000004  73706163          DCB      0x73,0x70,0x61,0x63
000008  6500              DCB      0x65,0x00

                          AREA ||area_number.69||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.69||, ||.constdata||
                  shellDesc0x7F000000
000000  6261636b          DCB      0x62,0x61,0x63,0x6b
000004  73706163          DCB      0x73,0x70,0x61,0x63
000008  6500              DCB      0x65,0x00

                          AREA ||area_number.70||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.70||, ||.constdata||
                  shellDesc0x1B5B337E
000000  64656c65          DCB      0x64,0x65,0x6c,0x65
000004  746500            DCB      0x74,0x65,0x00

                          AREA ||area_number.71||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.71||, ||.constdata||
                  shellDesc0x0A000000
000000  656e7465          DCB      0x65,0x6e,0x74,0x65
000004  7200              DCB      0x72,0x00

                          AREA ||area_number.72||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.72||, ||.constdata||
                  shellDesc0x0D000000
000000  656e7465          DCB      0x65,0x6e,0x74,0x65
000004  7200              DCB      0x72,0x00

                          AREA ||area_number.73||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.73||, ||.constdata||
                  shellCmdhelp
000000  68656c70          DCB      0x68,0x65,0x6c,0x70
000004  00                DCB      0x00

                          AREA ||area_number.74||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.74||, ||.constdata||
                  shellDeschelp
000000  73686f77          DCB      0x73,0x68,0x6f,0x77
000004  20636f6d          DCB      0x20,0x63,0x6f,0x6d
000008  6d616e64          DCB      0x6d,0x61,0x6e,0x64
00000c  20696e66          DCB      0x20,0x69,0x6e,0x66
000010  6f0d0a68          DCB      0x6f,0x0d,0x0a,0x68
000014  656c7020          DCB      0x65,0x6c,0x70,0x20
000018  5b636d64          DCB      0x5b,0x63,0x6d,0x64
00001c  5d00              DCB      0x5d,0x00

                          AREA ||area_number.75||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.75||, ||.constdata||
                  shellCmdusers
000000  75736572          DCB      0x75,0x73,0x65,0x72
000004  7300              DCB      0x73,0x00

                          AREA ||area_number.76||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.76||, ||.constdata||
                  shellDescusers
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20616c6c          DCB      0x20,0x61,0x6c,0x6c
000008  20757365          DCB      0x20,0x75,0x73,0x65
00000c  7200              DCB      0x72,0x00

                          AREA ||area_number.77||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.77||, ||.constdata||
                  shellCmdcmds
000000  636d6473          DCB      0x63,0x6d,0x64,0x73
000004  00                DCB      0x00

                          AREA ||area_number.78||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.78||, ||.constdata||
                  shellDesccmds
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20616c6c          DCB      0x20,0x61,0x6c,0x6c
000008  20636d64          DCB      0x20,0x63,0x6d,0x64
00000c  00                DCB      0x00

                          AREA ||area_number.79||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.79||, ||.constdata||
                  shellCmdvars
000000  76617273          DCB      0x76,0x61,0x72,0x73
000004  00                DCB      0x00

                          AREA ||area_number.80||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.80||, ||.constdata||
                  shellDescvars
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20616c6c          DCB      0x20,0x61,0x6c,0x6c
000008  20766172          DCB      0x20,0x76,0x61,0x72
00000c  00                DCB      0x00

                          AREA ||area_number.81||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.81||, ||.constdata||
                  shellCmdkeys
000000  6b657973          DCB      0x6b,0x65,0x79,0x73
000004  00                DCB      0x00

                          AREA ||area_number.82||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.82||, ||.constdata||
                  shellDesckeys
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20616c6c          DCB      0x20,0x61,0x6c,0x6c
000008  206b6579          DCB      0x20,0x6b,0x65,0x79
00000c  00                DCB      0x00

                          AREA ||area_number.83||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.83||, ||.constdata||
                  shellCmdclear
000000  636c6561          DCB      0x63,0x6c,0x65,0x61
000004  7200              DCB      0x72,0x00

                          AREA ||area_number.84||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.84||, ||.constdata||
                  shellDescclear
000000  636c6561          DCB      0x63,0x6c,0x65,0x61
000004  7220636f          DCB      0x72,0x20,0x63,0x6f
000008  6e736f6c          DCB      0x6e,0x73,0x6f,0x6c
00000c  6500              DCB      0x65,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0d0a205f          DCB      "\r\n _         _   _                  _          _ _ \r"
000004  20202020
000008  20202020
00000c  205f2020
000010  205f2020
000014  20202020
000018  20202020
00001c  20202020
000020  20202020
000024  5f202020
000028  20202020
00002c  2020205f
000030  205f200d
000034  0a7c207c          DCB      "\n| |    ___| |_| |_ ___ _ __   ___| |__   ___| | |\r\n"
000038  20202020
00003c  5f5f5f7c
000040  207c5f7c
000044  207c5f20
000048  5f5f5f20
00004c  5f205f5f
000050  2020205f
000054  5f5f7c20
000058  7c5f5f20
00005c  20205f5f
000060  5f7c207c
000064  207c0d0a
000068  7c207c20          DCB      "| |   / _ \\ __| __/ _ \\ '__| / __| '_ \\ / _ \\ | |\r"
00006c  20202f20
000070  5f205c20
000074  5f5f7c20
000078  5f5f2f20
00007c  5f205c20
000080  275f5f7c
000084  202f205f
000088  5f7c2027
00008c  5f205c20
000090  2f205f20
000094  5c207c20
000098  7c0d    
00009a  0a7c207c          DCB      "\n| |__|  __/ |_| ||  __/ |    \\__ \\ | | |  __/ | |\r"
00009e  5f5f7c20
0000a2  205f5f2f
0000a6  207c5f7c
0000aa  207c7c20
0000ae  205f5f2f
0000b2  207c2020
0000b6  20205c5f
0000ba  5f205c20
0000be  7c207c20
0000c2  7c20205f
0000c6  5f2f207c
0000ca  207c0d  
0000cd  0a7c5f5f          DCB      "\n|_____\\___|\\__|\\__\\___|_|    |___/_| |_|\\___|_|_"
0000d1  5f5f5f5c
0000d5  5f5f5f7c
0000d9  5c5f5f7c
0000dd  5c5f5f5c
0000e1  5f5f5f7c
0000e5  5f7c2020
0000e9  20207c5f
0000ed  5f5f2f5f
0000f1  7c207c5f
0000f5  7c5c5f5f
0000f9  5f7c5f7c
0000fd  5f      
0000fe  7c0d0a0d          DCB      "|\r\n\r\nBuild:       Aug  9 2022 22:14:52\r\nVersion: "
000102  0a427569
000106  6c643a20
00010a  20202020
00010e  20204175
000112  67202039
000116  20323032
00011a  32203232
00011e  3a31343a
000122  35320d0a
000126  56657273
00012a  696f6e3a
00012e  20      
00012f  20202020          DCB      "    3.1.2\r\nCopyright:   (c) 2020 Letter\r\n",0
000133  332e312e
000137  320d0a43
00013b  6f707972
00013f  69676874
000143  3a202020
000147  28632920
00014b  32303230
00014f  204c6574
000153  7465720d
000157  0a00    
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
00015c  0d0a5761          DCB      "\r\nWarning: Command is too long\r\n",0
000160  726e696e
000164  673a2043
000168  6f6d6d61
00016c  6e642069
000170  7320746f
000174  6f206c6f
000178  6e670d0a
00017c  00      
00017d  00                DCB      0
00017e  00                DCB      0
00017f  00                DCB      0
000180  0d0a436f          DCB      "\r\nCommand List:\r\n",0
000184  6d6d616e
000188  64204c69
00018c  73743a0d
000190  0a00    
000192  00                DCB      0
000193  00                DCB      0
000194  0d0a5661          DCB      "\r\nVar List:\r\n",0
000198  72204c69
00019c  73743a0d
0001a0  0a00    
0001a2  00                DCB      0
0001a3  00                DCB      0
0001a4  0d0a5573          DCB      "\r\nUser List:\r\n",0
0001a8  6572204c
0001ac  6973743a
0001b0  0d0a00  
0001b3  00                DCB      0
0001b4  0d0a4b65          DCB      "\r\nKey List:\r\n",0
0001b8  79204c69
0001bc  73743a0d
0001c0  0a00    
0001c2  00                DCB      0
0001c3  00                DCB      0
0001c4  436f6d6d          DCB      "Command not Found\r\n",0
0001c8  616e6420
0001cc  6e6f7420
0001d0  466f756e
0001d4  640d0a00
0001d8  63616e27          DCB      "can't set pointer\r\n",0
0001dc  74207365
0001e0  7420706f
0001e4  696e7465
0001e8  720d0a00
0001ec  63616e27          DCB      "can't set read only var\r\n",0
0001f0  74207365
0001f4  74207265
0001f8  6164206f
0001fc  6e6c7920
000200  7661720d
000204  0a00    
000206  00                DCB      0
000207  00                DCB      0
000208  20697320          DCB      " is not a var\r\n",0
00020c  6e6f7420
000210  61207661
000214  720d0a00
000218  56617220          DCB      "Var not Fount\r\n",0
00021c  6e6f7420
000220  466f756e
000224  740d0a00
000228  636f6d6d          DCB      "command help of ",0
00022c  616e6420
000230  68656c70
000234  206f6620
000238  00      
000239  00                DCB      0
00023a  00                DCB      0
00023b  00                DCB      0
00023c  506c6561          DCB      "Please input password:",0
000240  73652069
000244  6e707574
000248  20706173
00024c  73776f72
000250  643a00  
000253  00                DCB      0
000254  0d0a7061          DCB      "\r\npassword error\r\n",0
000258  7373776f
00025c  72642065
000260  72726f72
000264  0d0a00  
000267  00                DCB      0
000268  1b5b324a          DCB      27,"[2J",27,"[1H",0
00026c  1b5b3148
000270  00      
000271  00                DCB      0
000272  00                DCB      0
000273  00                DCB      0
000274  1b5b324b          DCB      27,"[2K\r",0
000278  0d00    
00027a  00                DCB      0
00027b  00                DCB      0
00027c  434d4420          DCB      "CMD ",0
000280  00      
000281  00                DCB      0
000282  00                DCB      0
000283  00                DCB      0
000284  56415220          DCB      "VAR ",0
000288  00      
000289  00                DCB      0
00028a  00                DCB      0
00028b  00                DCB      0
00028c  55534552          DCB      "USER",0
000290  00      
000291  00                DCB      0
000292  00                DCB      0
000293  00                DCB      0
000294  4b455920          DCB      "KEY ",0
000298  00      
000299  00                DCB      0
00029a  00                DCB      0
00029b  00                DCB      0
00029c  4e4f4e45          DCB      "NONE",0
0002a0  00      

                          AREA ||.data||, DATA, ALIGN=2

                  shellText
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x15c
                          DCD      ||.conststring||+0x180
                          DCD      ||.conststring||+0x194
                          DCD      ||.conststring||+0x1a4
                          DCD      ||.conststring||+0x1b4
                          DCD      ||.conststring||+0x1c4
                          DCD      ||.conststring||+0x1d8
                          DCD      ||.conststring||+0x1ec
                          DCD      ||.conststring||+0x208
                          DCD      ||.conststring||+0x218
                          DCD      ||.conststring||+0x228
                          DCD      ||.conststring||+0x23c
                          DCD      ||.conststring||+0x254
                          DCD      ||.conststring||+0x268
                          DCD      ||.conststring||+0x274
                          DCD      ||.conststring||+0x27c
                          DCD      ||.conststring||+0x284
                          DCD      ||.conststring||+0x28c
                          DCD      ||.conststring||+0x294
                          DCD      ||.conststring||+0x29c

                          AREA shellCommand, DATA, READONLY, ALIGN=2

                  shellUserDefault
                  ||__tagsym$$used||
                          DCD      0x00000800
                          DCD      shellCmdDefaultUser
                          DCD      shellPasswordDefaultUser
                          DCD      shellDesDefaultUser
                  shellCommandsetVar
                  |symbol_number.443|
                          DCD      0x00002100
                          DCD      shellCmdsetVar
                          DCD      shellSetVar
                          DCD      shellDescsetVar
                  shellKey0x1B5B4100
                  |symbol_number.444|
                          DCD      0x00000900
                          DCD      0x1b5b4100
                          DCD      shellUp
                          DCD      shellDesc0x1B5B4100
                  shellKey0x1B5B4200
                  |symbol_number.445|
                          DCD      0x00000900
                          DCD      0x1b5b4200
                          DCD      shellDown
                          DCD      shellDesc0x1B5B4200
                  shellKey0x1B5B4300
                  |symbol_number.446|
                          DCD      0x00001900
                          DCD      0x1b5b4300
                          DCD      shellRight
                          DCD      shellDesc0x1B5B4300
                  shellKey0x1B5B4400
                  |symbol_number.447|
                          DCD      0x00001900
                          DCD      0x1b5b4400
                          DCD      shellLeft
                          DCD      shellDesc0x1B5B4400
                  shellKey0x09000000
                  |symbol_number.448|
                          DCD      0x00000900
                          DCD      0x09000000
                          DCD      shellTab
                          DCD      shellDesc0x09000000
                  shellKey0x08000000
                  |symbol_number.449|
                          DCD      0x00001900
                          DCD      0x08000000
                          DCD      shellBackspace
                          DCD      shellDesc0x08000000
                  shellKey0x7F000000
                  |symbol_number.450|
                          DCD      0x00001900
                          DCD      0x7f000000
                          DCD      shellBackspace
                          DCD      shellDesc0x7F000000
                  shellKey0x1B5B337E
                  |symbol_number.451|
                          DCD      0x00001900
                          DCD      0x1b5b337e
                          DCD      shellDelete
                          DCD      shellDesc0x1B5B337E
                  shellKey0x0A000000
                  |symbol_number.452|
                          DCD      0x00001900
                          DCD      0x0a000000
                          DCD      shellEnter
                          DCD      shellDesc0x0A000000
                  shellKey0x0D000000
                  |symbol_number.453|
                          DCD      0x00001900
                          DCD      0x0d000000
                          DCD      shellEnter
                          DCD      shellDesc0x0D000000
                  shellCommandhelp
                  |symbol_number.454|
                          DCD      0x00002000
                          DCD      shellCmdhelp
                          DCD      shellHelp
                          DCD      shellDeschelp
                  shellCommandusers
                  |symbol_number.455|
                          DCD      0x00002100
                          DCD      shellCmdusers
                          DCD      shellUsers
                          DCD      shellDescusers
                  shellCommandcmds
                  |symbol_number.456|
                          DCD      0x00002100
                          DCD      shellCmdcmds
                          DCD      shellCmds
                          DCD      shellDesccmds
                  shellCommandvars
                  |symbol_number.457|
                          DCD      0x00002100
                          DCD      shellCmdvars
                          DCD      shellVars
                          DCD      shellDescvars
                  shellCommandkeys
                  |symbol_number.458|
                          DCD      0x00002100
                          DCD      shellCmdkeys
                          DCD      shellKeys
                          DCD      shellDesckeys
                  shellCommandclear
                  |symbol_number.459|
                          DCD      0x00002100
                          DCD      shellCmdclear
                          DCD      shellClear
                          DCD      shellDescclear
