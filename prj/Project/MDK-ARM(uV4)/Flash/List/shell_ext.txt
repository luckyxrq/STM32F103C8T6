; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\shell_ext.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\shell_ext.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\pt-1.4 -I..\..\letter-shell\src -I.\RTE\_Flash -IC:\Users\ws\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\ws\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\flash\obj\shell_ext.crf ..\..\letter-shell\src\shell_ext.c]
                          THUMB

                          AREA ||i.shellExtParseChar||, CODE, READONLY, ALIGN=1

                  shellExtParseChar PROC
;;;92      */
;;;93     static char shellExtParseChar(char *string)
000000  1c41              ADDS     r1,r0,#1
;;;94     {
;;;95         char *p = string + 1;
;;;96         char value = 0;
000002  2000              MOVS     r0,#0
;;;97     
;;;98         if (*p == '\\')
000004  780a              LDRB     r2,[r1,#0]
000006  2a5c              CMP      r2,#0x5c
000008  d001              BEQ      |L1.14|
00000a  4610              MOV      r0,r2                 ;94
                  |L1.12|
;;;99         {
;;;100            switch (*(p + 1))
;;;101            {
;;;102            case 'b':
;;;103                value = '\b';
;;;104                break;
;;;105            case 'r':
;;;106                value = '\r';
;;;107                break;
;;;108            case 'n':
;;;109                value = '\n';
;;;110                break;
;;;111            case 't':
;;;112                value = '\t';
;;;113                break;
;;;114            case '0':
;;;115                value = 0;
;;;116                break;
;;;117            default:
;;;118                value = *(p + 1);
;;;119                break;
;;;120            }
;;;121        }
;;;122        else
;;;123        {
;;;124            value = *p;
;;;125        }
;;;126        return value;
;;;127    }
00000c  4770              BX       lr
                  |L1.14|
00000e  7849              LDRB     r1,[r1,#1]            ;100
000010  296e              CMP      r1,#0x6e              ;100
000012  d00f              BEQ      |L1.52|
000014  dc04              BGT      |L1.32|
000016  2930              CMP      r1,#0x30              ;100
000018  d0f8              BEQ      |L1.12|
00001a  2962              CMP      r1,#0x62              ;100
00001c  d104              BNE      |L1.40|
00001e  e005              B        |L1.44|
                  |L1.32|
000020  2972              CMP      r1,#0x72              ;100
000022  d005              BEQ      |L1.48|
000024  2974              CMP      r1,#0x74              ;100
000026  d007              BEQ      |L1.56|
                  |L1.40|
000028  4608              MOV      r0,r1                 ;100
00002a  4770              BX       lr
                  |L1.44|
00002c  2008              MOVS     r0,#8                 ;103
00002e  4770              BX       lr
                  |L1.48|
000030  200d              MOVS     r0,#0xd               ;106
000032  4770              BX       lr
                  |L1.52|
000034  200a              MOVS     r0,#0xa               ;109
000036  4770              BX       lr
                  |L1.56|
000038  2009              MOVS     r0,#9                 ;112
00003a  4770              BX       lr
;;;128    
                          ENDP


                          AREA ||i.shellExtParseNumber||, CODE, READONLY, ALIGN=2

                  shellExtParseNumber PROC
;;;174     */
;;;175    static unsigned int shellExtParseNumber(char *string)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;176    {
000004  4607              MOV      r7,r0
;;;177        ShellNumType type = NUM_TYPE_DEC;
;;;178        char radix = 10;
;;;179        char *p = string;
;;;180        char offset = 0;
000006  2300              MOVS     r3,#0
;;;181        signed char sign = 1;
;;;182        unsigned int valueInt = 0;
;;;183        float valueFloat = 0.0;
;;;184        unsigned int devide = 0;
;;;185    
;;;186        if (*string == '-')
000008  7800              LDRB     r0,[r0,#0]
00000a  260a              MOVS     r6,#0xa               ;178
00000c  2201              MOVS     r2,#1                 ;181
00000e  461d              MOV      r5,r3                 ;182
000010  461c              MOV      r4,r3                 ;184
000012  282d              CMP      r0,#0x2d
000014  d008              BEQ      |L2.40|
;;;187        {
;;;188            sign = -1;
;;;189        }
;;;190    
;;;191        type = shellExtNumType(string + ((sign == -1) ? 1 : 0));
000016  2000              MOVS     r0,#0
                  |L2.24|
000018  4438              ADD      r0,r0,r7
00001a  2100              MOVS     r1,#0
00001c  f890c000          LDRB     r12,[r0,#0]
000020  f1bc0f30          CMP      r12,#0x30
000024  d004              BEQ      |L2.48|
000026  e01f              B        |L2.104|
                  |L2.40|
000028  f04f32ff          MOV      r2,#0xffffffff        ;188
00002c  2001              MOVS     r0,#1
00002e  e7f3              B        |L2.24|
                  |L2.48|
000030  7841              LDRB     r1,[r0,#1]            ;188
000032  2978              CMP      r1,#0x78              ;188
000034  d007              BEQ      |L2.70|
000036  2958              CMP      r1,#0x58              ;188
000038  d005              BEQ      |L2.70|
00003a  2962              CMP      r1,#0x62              ;188
00003c  d005              BEQ      |L2.74|
00003e  2942              CMP      r1,#0x42              ;188
000040  d003              BEQ      |L2.74|
000042  2102              MOVS     r1,#2                 ;188
000044  e010              B        |L2.104|
                  |L2.70|
000046  2103              MOVS     r1,#3                 ;188
000048  e00e              B        |L2.104|
                  |L2.74|
00004a  2101              MOVS     r1,#1                 ;188
00004c  e00c              B        |L2.104|
00004e  bf00              NOP                            ;188
                  |L2.80|
000050  f890c000          LDRB     r12,[r0,#0]           ;188
000054  f1bc0f2e          CMP      r12,#0x2e             ;188
000058  d106              BNE      |L2.104|
00005a  f890c001          LDRB     r12,[r0,#1]           ;188
00005e  f1bc0f00          CMP      r12,#0                ;188
000062  d001              BEQ      |L2.104|
000064  2104              MOVS     r1,#4                 ;188
000066  e011              B        |L2.140|
                  |L2.104|
000068  f810cb01          LDRB     r12,[r0],#1           ;188
00006c  f1bc0f00          CMP      r12,#0                ;188
000070  d1ee              BNE      |L2.80|
;;;192    
;;;193        switch ((char)type)
000072  2901              CMP      r1,#1
000074  d008              BEQ      |L2.136|
000076  2902              CMP      r1,#2
000078  d003              BEQ      |L2.130|
00007a  2903              CMP      r1,#3
00007c  d106              BNE      |L2.140|
;;;194        {
;;;195        case NUM_TYPE_HEX:
;;;196            radix = 16;
00007e  2610              MOVS     r6,#0x10
;;;197            offset = 2;
;;;198            break;
000080  e003              B        |L2.138|
                  |L2.130|
;;;199        
;;;200        case NUM_TYPE_OCT:
;;;201            radix = 8;
000082  2608              MOVS     r6,#8
;;;202            offset = 1;
000084  2301              MOVS     r3,#1
;;;203            break;
000086  e001              B        |L2.140|
                  |L2.136|
;;;204    
;;;205        case NUM_TYPE_BIN:
;;;206            radix = 2;
000088  2602              MOVS     r6,#2
                  |L2.138|
00008a  2302              MOVS     r3,#2                 ;197
                  |L2.140|
;;;207            offset = 2;
;;;208            break;
;;;209        
;;;210        default:
;;;211            break;
;;;212        }
;;;213    
;;;214        p = string + offset + ((sign == -1) ? 1 : 0);
00008c  443b              ADD      r3,r3,r7
00008e  1c50              ADDS     r0,r2,#1
000090  d002              BEQ      |L2.152|
000092  2000              MOVS     r0,#0
                  |L2.148|
000094  4403              ADD      r3,r3,r0
;;;215    
;;;216        while (*p)
000096  e01f              B        |L2.216|
                  |L2.152|
000098  2001              MOVS     r0,#1                 ;214
00009a  e7fb              B        |L2.148|
                  |L2.156|
;;;217        {
;;;218            if (*p == '.')
00009c  282e              CMP      r0,#0x2e
00009e  d005              BEQ      |L2.172|
0000a0  f1a00730          SUB      r7,r0,#0x30
0000a4  2f09              CMP      r7,#9
0000a6  d803              BHI      |L2.176|
0000a8  b2f8              UXTB     r0,r7
0000aa  e00f              B        |L2.204|
                  |L2.172|
;;;219            {
;;;220                devide = 1;
0000ac  2401              MOVS     r4,#1
;;;221                p++;
;;;222                continue;
0000ae  e012              B        |L2.214|
                  |L2.176|
0000b0  f1a00761          SUB      r7,r0,#0x61
0000b4  2f05              CMP      r7,#5
0000b6  d801              BHI      |L2.188|
0000b8  3857              SUBS     r0,r0,#0x57
0000ba  e004              B        |L2.198|
                  |L2.188|
0000bc  f1a00741          SUB      r7,r0,#0x41
0000c0  2f05              CMP      r7,#5
0000c2  d802              BHI      |L2.202|
0000c4  3837              SUBS     r0,r0,#0x37
                  |L2.198|
0000c6  b2c0              UXTB     r0,r0
0000c8  e000              B        |L2.204|
                  |L2.202|
0000ca  2000              MOVS     r0,#0
                  |L2.204|
;;;223            }
;;;224            valueInt = valueInt * radix + shellExtToNum(*p);
0000cc  fb050506          MLA      r5,r5,r6,r0
;;;225            devide *= 10;
0000d0  eb040084          ADD      r0,r4,r4,LSL #2
0000d4  0044              LSLS     r4,r0,#1
                  |L2.214|
0000d6  1c5b              ADDS     r3,r3,#1
                  |L2.216|
0000d8  7818              LDRB     r0,[r3,#0]            ;216
0000da  2800              CMP      r0,#0                 ;216
0000dc  d1de              BNE      |L2.156|
;;;226            p++;
;;;227        }
;;;228        if (type == NUM_TYPE_FLOAT && devide != 0)
0000de  2904              CMP      r1,#4
0000e0  d113              BNE      |L2.266|
0000e2  b194              CBZ      r4,|L2.266|
;;;229        {
;;;230            valueFloat = (float)valueInt / devide * sign;
0000e4  4610              MOV      r0,r2
0000e6  f7fffffe          BL       __aeabi_i2f
0000ea  4606              MOV      r6,r0
0000ec  4620              MOV      r0,r4
0000ee  f7fffffe          BL       __aeabi_ui2f
0000f2  4604              MOV      r4,r0
0000f4  4628              MOV      r0,r5
0000f6  f7fffffe          BL       __aeabi_ui2f
0000fa  4621              MOV      r1,r4
0000fc  f7fffffe          BL       __aeabi_fdiv
000100  4631              MOV      r1,r6
000102  e8bd41f0          POP      {r4-r8,lr}
000106  f7ffbffe          B.W      __aeabi_fmul
                  |L2.266|
;;;231            return *(unsigned int *)(&valueFloat);
;;;232        }
;;;233        else
;;;234        {
;;;235            return valueInt * sign;
00010a  fb05f002          MUL      r0,r5,r2
;;;236        }
;;;237    }
00010e  e8bd81f0          POP      {r4-r8,pc}
;;;238    
                          ENDP


                          AREA ||i.shellExtParsePara||, CODE, READONLY, ALIGN=1

                  shellExtParsePara PROC
;;;270     */
;;;271    unsigned int shellExtParsePara(Shell *shell, char *string)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;272    {
000004  4604              MOV      r4,r0
;;;273        if (*string == '\'' && *(string + 1))
000006  7808              LDRB     r0,[r1,#0]
000008  2827              CMP      r0,#0x27
00000a  d00a              BEQ      |L3.34|
;;;274        {
;;;275            return (unsigned int)shellExtParseChar(string);
;;;276        }
;;;277        else if (*string == '-' || (*string >= '0' && *string <= '9'))
00000c  282d              CMP      r0,#0x2d
00000e  d003              BEQ      |L3.24|
                  |L3.16|
000010  f1a00230          SUB      r2,r0,#0x30
000014  2a09              CMP      r2,#9
000016  d80c              BHI      |L3.50|
                  |L3.24|
;;;278        {
;;;279            return (unsigned int)shellExtParseNumber(string);
000018  e8bd41f0          POP      {r4-r8,lr}
00001c  4608              MOV      r0,r1
00001e  f7ffbffe          B.W      shellExtParseNumber
                  |L3.34|
000022  784a              LDRB     r2,[r1,#1]            ;273
000024  2a00              CMP      r2,#0                 ;273
000026  d0f3              BEQ      |L3.16|
000028  e8bd41f0          POP      {r4-r8,lr}            ;275
00002c  4608              MOV      r0,r1                 ;275
00002e  f7ffbffe          B.W      shellExtParseChar
                  |L3.50|
000032  2600              MOVS     r6,#0                 ;275
;;;280        }
;;;281        else if (*string == '$' && *(string + 1))
000034  2824              CMP      r0,#0x24
000036  d007              BEQ      |L3.72|
;;;282        {
;;;283            return shellExtParseVar(shell, string);
;;;284        }
;;;285        else if (*string)
000038  2800              CMP      r0,#0
00003a  d016              BEQ      |L3.106|
                  |L3.60|
00003c  2700              MOVS     r7,#0
;;;286        {
;;;287            return (unsigned int)shellExtParseString(string);
00003e  460d              MOV      r5,r1
000040  460c              MOV      r4,r1
000042  2822              CMP      r0,#0x22
000044  d013              BEQ      |L3.110|
000046  e01d              B        |L3.132|
                  |L3.72|
000048  784a              LDRB     r2,[r1,#1]            ;281
00004a  2a00              CMP      r2,#0                 ;281
00004c  d0f6              BEQ      |L3.60|
00004e  2300              MOVS     r3,#0                 ;281
000050  4620              MOV      r0,r4                 ;281
000052  1c49              ADDS     r1,r1,#1              ;281
000054  6da2              LDR      r2,[r4,#0x58]         ;281
000056  f7fffffe          BL       shellSeekCommand
00005a  0001              MOVS     r1,r0                 ;281
00005c  d004              BEQ      |L3.104|
00005e  4620              MOV      r0,r4                 ;281
000060  e8bd41f0          POP      {r4-r8,lr}            ;281
000064  f7ffbffe          B.W      shellGetVarValue
                  |L3.104|
000068  4630              MOV      r0,r6                 ;281
                  |L3.106|
;;;288        }
;;;289        return 0;
;;;290    }
00006a  e8bd81f0          POP      {r4-r8,pc}
                  |L3.110|
00006e  1c6c              ADDS     r4,r5,#1
000070  4625              MOV      r5,r4
000072  e007              B        |L3.132|
                  |L3.116|
000074  285c              CMP      r0,#0x5c
000076  d00b              BEQ      |L3.144|
000078  2822              CMP      r0,#0x22
00007a  d00f              BEQ      |L3.156|
00007c  55e8              STRB     r0,[r5,r7]
                  |L3.126|
00007e  1c7f              ADDS     r7,r7,#1
000080  b2bf              UXTH     r7,r7
000082  1c64              ADDS     r4,r4,#1
                  |L3.132|
000084  7820              LDRB     r0,[r4,#0]
000086  2800              CMP      r0,#0
000088  d1f4              BNE      |L3.116|
00008a  55ee              STRB     r6,[r5,r7]
00008c  4628              MOV      r0,r5
00008e  e7ec              B        |L3.106|
                  |L3.144|
000090  1e60              SUBS     r0,r4,#1
000092  f7fffffe          BL       shellExtParseChar
000096  55e8              STRB     r0,[r5,r7]
000098  1c64              ADDS     r4,r4,#1
00009a  e7f0              B        |L3.126|
                  |L3.156|
00009c  55ee              STRB     r6,[r5,r7]
00009e  e7ee              B        |L3.126|
;;;291    
                          ENDP


                          AREA ||i.shellExtRun||, CODE, READONLY, ALIGN=1

                  shellExtRun PROC
;;;301     */
;;;302    int shellExtRun(Shell *shell, ShellCommand *command, int argc, char *argv[])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;303    {
000004  b08c              SUB      sp,sp,#0x30
000006  460c              MOV      r4,r1
000008  4682              MOV      r10,r0
00000a  4699              MOV      r9,r3
00000c  4615              MOV      r5,r2
;;;304        unsigned int params[SHELL_PARAMETER_MAX_NUMBER] = {0};
00000e  2120              MOVS     r1,#0x20
000010  a803              ADD      r0,sp,#0xc
000012  f7fffffe          BL       __aeabi_memclr4
;;;305        int paramNum = command->attr.attrs.paramNum > (argc - 1) ? 
000016  78a0              LDRB     r0,[r4,#2]
000018  1e6e              SUBS     r6,r5,#1
00001a  f000070f          AND      r7,r0,#0xf
00001e  42b7              CMP      r7,r6
000020  dc00              BGT      |L4.36|
;;;306            command->attr.attrs.paramNum : (argc - 1);
000022  4637              MOV      r7,r6
                  |L4.36|
;;;307        for (int i = 0; i < argc - 1; i++)
000024  2500              MOVS     r5,#0
000026  f10d080c          ADD      r8,sp,#0xc            ;304
00002a  e008              B        |L4.62|
                  |L4.44|
;;;308        {
;;;309            params[i] = shellExtParsePara(shell, argv[i + 1]);
00002c  eb090085          ADD      r0,r9,r5,LSL #2
000030  6841              LDR      r1,[r0,#4]
000032  4650              MOV      r0,r10
000034  f7fffffe          BL       shellExtParsePara
000038  f8480025          STR      r0,[r8,r5,LSL #2]
00003c  1c6d              ADDS     r5,r5,#1
                  |L4.62|
00003e  42b5              CMP      r5,r6                 ;307
000040  dbf4              BLT      |L4.44|
;;;310        }
;;;311        switch (paramNum)
000042  2f08              CMP      r7,#8
000044  d23c              BCS      |L4.192|
000046  e8dff007          TBB      [pc,r7]
00004a  0409              DCB      0x04,0x09
00004c  0d12181e          DCB      0x0d,0x12,0x18,0x1e
000050  2630              DCB      0x26,0x30
;;;312        {
;;;313    #if SHELL_PARAMETER_MAX_NUMBER >= 1
;;;314        case 0:
;;;315            return command->data.cmd.function();
000052  68a0              LDR      r0,[r4,#8]
000054  4780              BLX      r0
                  |L4.86|
;;;316            // break;
;;;317    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 1 */
;;;318    #if SHELL_PARAMETER_MAX_NUMBER >= 2
;;;319        case 1:
;;;320            return command->data.cmd.function(params[0]);
;;;321            // break;
;;;322    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 2 */
;;;323    #if SHELL_PARAMETER_MAX_NUMBER >= 3
;;;324        case 2:
;;;325            return command->data.cmd.function(params[0], params[1]);
;;;326            // break;
;;;327    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 3 */
;;;328    #if SHELL_PARAMETER_MAX_NUMBER >= 4
;;;329        case 3:
;;;330            return command->data.cmd.function(params[0], params[1],
;;;331                                              params[2]);
;;;332            // break;
;;;333    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 4 */
;;;334    #if SHELL_PARAMETER_MAX_NUMBER >= 5
;;;335        case 4:
;;;336            return command->data.cmd.function(params[0], params[1],
;;;337                                              params[2], params[3]);
;;;338            // break;
;;;339    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 5 */
;;;340    #if SHELL_PARAMETER_MAX_NUMBER >= 6
;;;341        case 5:
;;;342            return command->data.cmd.function(params[0], params[1],
;;;343                                              params[2], params[3],
;;;344                                              params[4]);
;;;345            // break;
;;;346    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 6 */
;;;347    #if SHELL_PARAMETER_MAX_NUMBER >= 7
;;;348        case 6:
;;;349            return command->data.cmd.function(params[0], params[1],
;;;350                                              params[2], params[3],
;;;351                                              params[4], params[5]);
;;;352            // break;
;;;353    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 7 */
;;;354    #if SHELL_PARAMETER_MAX_NUMBER >= 8
;;;355        case 7:
;;;356            return command->data.cmd.function(params[0], params[1],
;;;357                                              params[2], params[3],
;;;358                                              params[4], params[5],
;;;359                                              params[6]);
;;;360            // break;
;;;361    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 8 */
;;;362    #if SHELL_PARAMETER_MAX_NUMBER >= 9
;;;363        case 8:
;;;364            return command->data.cmd.function(params[0], params[1],
;;;365                                              params[2], params[3],
;;;366                                              params[4], params[5],
;;;367                                              params[6], params[7]);
;;;368            // break;
;;;369    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 9 */
;;;370    #if SHELL_PARAMETER_MAX_NUMBER >= 10
;;;371        case 9:
;;;372            return command->data.cmd.function(params[0], params[1],
;;;373                                              params[2], params[3],
;;;374                                              params[4], params[5],
;;;375                                              params[6], params[7],
;;;376                                              params[8]);
;;;377            // break;
;;;378    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 10 */
;;;379    #if SHELL_PARAMETER_MAX_NUMBER >= 11
;;;380        case 10:
;;;381            return command->data.cmd.function(params[0], params[1],
;;;382                                              params[2], params[3],
;;;383                                              params[4], params[5],
;;;384                                              params[6], params[7],
;;;385                                              params[8], params[9]);
;;;386            // break;
;;;387    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 11 */
;;;388    #if SHELL_PARAMETER_MAX_NUMBER >= 12
;;;389        case 11:
;;;390            return command->data.cmd.function(params[0], params[1],
;;;391                                              params[2], params[3],
;;;392                                              params[4], params[5],
;;;393                                              params[6], params[7],
;;;394                                              params[8], params[9],
;;;395                                              params[10]);
;;;396            // break;
;;;397    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 12 */
;;;398    #if SHELL_PARAMETER_MAX_NUMBER >= 13
;;;399        case 12:
;;;400            return command->data.cmd.function(params[0], params[1],
;;;401                                              params[2], params[3],
;;;402                                              params[4], params[5],
;;;403                                              params[6], params[7],
;;;404                                              params[8], params[9],
;;;405                                              params[10], params[11]);
;;;406            // break;
;;;407    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 13 */
;;;408    #if SHELL_PARAMETER_MAX_NUMBER >= 14
;;;409        case 13:
;;;410            return command->data.cmd.function(params[0], params[1],
;;;411                                              params[2], params[3],
;;;412                                              params[4], params[5],
;;;413                                              params[6], params[7],
;;;414                                              params[8], params[9],
;;;415                                              params[10], params[11],
;;;416                                              params[12]);
;;;417            // break;
;;;418    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 14 */
;;;419    #if SHELL_PARAMETER_MAX_NUMBER >= 15
;;;420        case 14:
;;;421            return command->data.cmd.function(params[0], params[1],
;;;422                                              params[2], params[3],
;;;423                                              params[4], params[5],
;;;424                                              params[6], params[7],
;;;425                                              params[8], params[9],
;;;426                                              params[10], params[11],
;;;427                                              params[12], params[13]);
;;;428            // break;
;;;429    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 15 */
;;;430    #if SHELL_PARAMETER_MAX_NUMBER >= 16
;;;431        case 15:
;;;432            return command->data.cmd.function(params[0], params[1],
;;;433                                              params[2], params[3],
;;;434                                              params[4], params[5],
;;;435                                              params[6], params[7],
;;;436                                              params[8], params[9],
;;;437                                              params[10], params[11],
;;;438                                              params[12], params[13],
;;;439                                              params[14]);
;;;440            // break;
;;;441    #endif /** SHELL_PARAMETER_MAX_NUMBER >= 16 */
;;;442        default:
;;;443            return -1;
;;;444            // break;
;;;445        }
;;;446    }
000056  b00c              ADD      sp,sp,#0x30
000058  e8bd87f0          POP      {r4-r10,pc}
00005c  68a1              LDR      r1,[r4,#8]            ;320
00005e  9803              LDR      r0,[sp,#0xc]          ;320
000060  4788              BLX      r1                    ;320
000062  e7f8              B        |L4.86|
000064  e9dd0103          LDRD     r0,r1,[sp,#0xc]
000068  68a2              LDR      r2,[r4,#8]            ;325
00006a  4790              BLX      r2                    ;325
00006c  e7f3              B        |L4.86|
00006e  ab03              ADD      r3,sp,#0xc
000070  e8930007          LDM      r3,{r0-r2}
000074  68a3              LDR      r3,[r4,#8]            ;330
000076  4798              BLX      r3                    ;330
000078  e7ed              B        |L4.86|
00007a  ad03              ADD      r5,sp,#0xc
00007c  68a4              LDR      r4,[r4,#8]            ;336
00007e  e895000f          LDM      r5,{r0-r3}
000082  47a0              BLX      r4                    ;336
000084  e7e7              B        |L4.86|
000086  9807              LDR      r0,[sp,#0x1c]         ;342
000088  9000              STR      r0,[sp,#0]            ;342
00008a  ad03              ADD      r5,sp,#0xc            ;342
00008c  68a4              LDR      r4,[r4,#8]            ;342
00008e  e895000f          LDM      r5,{r0-r3}            ;342
000092  47a0              BLX      r4                    ;342
000094  e7df              B        |L4.86|
000096  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
00009a  e9cd0100          STRD     r0,r1,[sp,#0]
00009e  ad03              ADD      r5,sp,#0xc
0000a0  68a4              LDR      r4,[r4,#8]            ;349
0000a2  e895000f          LDM      r5,{r0-r3}
0000a6  47a0              BLX      r4                    ;349
0000a8  e7d5              B        |L4.86|
0000aa  ab07              ADD      r3,sp,#0x1c
0000ac  ad03              ADD      r5,sp,#0xc
0000ae  e8930007          LDM      r3,{r0-r2}
0000b2  e88d0007          STM      sp,{r0-r2}
0000b6  e895000f          LDM      r5,{r0-r3}
0000ba  68a4              LDR      r4,[r4,#8]            ;356
0000bc  47a0              BLX      r4                    ;356
0000be  e7ca              B        |L4.86|
                  |L4.192|
0000c0  f04f30ff          MOV      r0,#0xffffffff        ;443
0000c4  e7c7              B        |L4.86|
;;;447    
                          ENDP

