; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\demo_spi_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\demo_spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -IC:\Users\ws\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\ws\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\flash\obj\demo_spi_flash.crf ..\..\User\app\src\demo_spi_flash.c]
                          THUMB

                          AREA ||i.DemoSpiFlash||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  DemoSpiFlash PROC
;;;42     */
;;;43     void DemoSpiFlash(void)
000000  b508              PUSH     {r3,lr}
;;;44     {
;;;45     	uint8_t cmd;
;;;46     	uint32_t uiReadPageNo = 0;
;;;47     
;;;48     	/* 检测串行Flash OK */
;;;49     	printf("检测到串行Flash, ID = %08X, 型号: %s \r\n", g_tSF.ChipID , g_tSF.ChipName);
000002  4d3d              LDR      r5,|L1.248|
000004  2400              MOVS     r4,#0                 ;46
000006  1d2a              ADDS     r2,r5,#4
000008  a03c              ADR      r0,|L1.252|
00000a  6829              LDR      r1,[r5,#0]  ; g_tSF
00000c  f7fffffe          BL       __2printf
;;;50     	printf("    容量 : %dM字节, 扇区大小 : %d字节\r\n", g_tSF.TotalSize/(1024*1024), g_tSF.PageSize);
000010  6968              LDR      r0,[r5,#0x14]  ; g_tSF
000012  8b2a              LDRH     r2,[r5,#0x18]  ; g_tSF
000014  0d01              LSRS     r1,r0,#20
000016  a043              ADR      r0,|L1.292|
000018  f7fffffe          BL       __2printf
;;;51     
;;;52     	sfDispMenu();		/* 打印命令提示 */
00001c  f7fffffe          BL       sfDispMenu
;;;53     	while(1)
;;;54     	{
;;;55     		bsp_Idle();		/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */
;;;56     		
;;;57     		//cmd = getchar();	/* 从串口读入一个字符 (阻塞方式) */
;;;58     		if (comGetChar(COM1, &cmd))	/* 从串口读入一个字符(非阻塞方式) */
;;;59     		{
;;;60     			switch (cmd)
;;;61     			{
;;;62     				case '1':
;;;63     					printf("\r\n【1 - 读串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
000020  f44f5680          MOV      r6,#0x1000
                  |L1.36|
000024  f7fffffe          BL       bsp_Idle
000028  4669              MOV      r1,sp                 ;58
00002a  2000              MOVS     r0,#0                 ;58
00002c  f7fffffe          BL       comGetChar
000030  b1b8              CBZ      r0,|L1.98|
000032  f89d0000          LDRB     r0,[sp,#0]            ;60
000036  2836              CMP      r0,#0x36              ;60
000038  d041              BEQ      |L1.190|
00003a  dc08              BGT      |L1.78|
00003c  f1a00031          SUB      r0,r0,#0x31           ;60
000040  2805              CMP      r0,#5                 ;60
000042  d20c              BCS      |L1.94|
000044  e8dff000          TBB      [pc,r0]               ;60
000048  1018202f          DCB      0x10,0x18,0x20,0x2f
00004c  3400              DCB      0x34,0x00
                  |L1.78|
00004e  2858              CMP      r0,#0x58              ;60
000050  d042              BEQ      |L1.216|
000052  285a              CMP      r0,#0x5a              ;60
000054  d03b              BEQ      |L1.206|
000056  2878              CMP      r0,#0x78              ;60
000058  d03e              BEQ      |L1.216|
00005a  287a              CMP      r0,#0x7a              ;60
00005c  d037              BEQ      |L1.206|
                  |L1.94|
;;;64     					sfReadTest();		/* 读串行Flash数据，并打印出来数据内容 */
;;;65     					break;
;;;66     
;;;67     				case '2':
;;;68     					printf("\r\n【2 - 写串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
;;;69     					sfWriteTest();		/* 写串行Flash数据，并打印写入速度 */
;;;70     					break;
;;;71     
;;;72     				case '3':
;;;73     					printf("\r\n【3 - 擦除整个串行Flash】\r\n");
;;;74     					sfErase();			/* 擦除串行Flash数据，实际上就是写入全0xFF */
;;;75     					break;
;;;76     
;;;77     				case '4':
;;;78     					printf("\r\n【4 - 写整个串行Flash, 全0x55】\r\n");
;;;79     					sfWriteAll(0x55);			/* 擦除串行Flash数据，实际上就是写入全0xFF */
;;;80     					break;
;;;81     
;;;82     				case '5':
;;;83     					printf("\r\n【5 - 写整个串行Flash, 全0xAA】\r\n");
;;;84     					sfWriteAll(0xAA);			/* 擦除串行Flash数据，实际上就是写入全0xFF */
;;;85     					break;
;;;86     
;;;87     				case '6':
;;;88     					printf("\r\n【6 - 读整个串行Flash, %dM字节】\r\n", g_tSF.TotalSize/(1024*1024));
;;;89     					sfTestReadSpeed();		/* 读整个串行Flash数据，测试速度 */
;;;90     					break;
;;;91     
;;;92     				case 'z':
;;;93     				case 'Z': /* 读取前1K */
;;;94     					if (uiReadPageNo > 0)
;;;95     					{
;;;96     						uiReadPageNo--;
;;;97     					}
;;;98     					else
;;;99     					{
;;;100    						printf("已经是最前\r\n");
;;;101    					}
;;;102    					sfViewData(uiReadPageNo * 1024);
;;;103    					break;
;;;104    
;;;105    				case 'x':
;;;106    				case 'X': /* 读取后1K */
;;;107    					if (uiReadPageNo < g_tSF.TotalSize / 1024 - 1)
;;;108    					{
;;;109    						uiReadPageNo++;
;;;110    					}
;;;111    					else
;;;112    					{
;;;113    						printf("已经是最后\r\n");
;;;114    					}
;;;115    					sfViewData(uiReadPageNo * 1024);
;;;116    					break;
;;;117    
;;;118    				default:
;;;119    					sfDispMenu();	/* 无效命令，重新打印命令提示 */
00005e  f7fffffe          BL       sfDispMenu
                  |L1.98|
;;;120    					break;
;;;121    
;;;122    			}
;;;123    		}
;;;124    		
;;;125    		/* 按键滤波和检测由后台systick中断服务程序实现，我们只需要调用bsp_GetKey读取键值即可。 */		
;;;126    		switch (bsp_GetKey())	/* bsp_GetKey()读取键值, 无键按下时返回 KEY_NONE = 0 */
000062  f7fffffe          BL       bsp_GetKey
000066  e7dd              B        |L1.36|
000068  4632              MOV      r2,r6                 ;63
00006a  2100              MOVS     r1,#0                 ;63
00006c  a037              ADR      r0,|L1.332|
00006e  f7fffffe          BL       __2printf
000072  f7fffffe          BL       sfReadTest
000076  e7f4              B        |L1.98|
000078  4632              MOV      r2,r6                 ;68
00007a  2100              MOVS     r1,#0                 ;68
00007c  a03f              ADR      r0,|L1.380|
00007e  f7fffffe          BL       __2printf
000082  f7fffffe          BL       sfWriteTest
000086  e7ec              B        |L1.98|
000088  a048              ADR      r0,|L1.428|
00008a  f7fffffe          BL       __2printf
00008e  f7fffffe          BL       bsp_GetRunTime
000092  4607              MOV      r7,r0                 ;73
000094  f7fffffe          BL       sf_EraseChip
000098  f7fffffe          BL       bsp_GetRunTime
00009c  1bc1              SUBS     r1,r0,r7              ;73
00009e  a04b              ADR      r0,|L1.460|
0000a0  f7fffffe          BL       __2printf
0000a4  e7dd              B        |L1.98|
0000a6  a052              ADR      r0,|L1.496|
0000a8  f7fffffe          BL       __2printf
0000ac  2055              MOVS     r0,#0x55              ;79
0000ae  e003              B        |L1.184|
0000b0  a058              ADR      r0,|L1.532|
0000b2  f7fffffe          BL       __2printf
0000b6  20aa              MOVS     r0,#0xaa              ;84
                  |L1.184|
0000b8  f7fffffe          BL       sfWriteAll
0000bc  e7d1              B        |L1.98|
                  |L1.190|
0000be  6968              LDR      r0,[r5,#0x14]         ;88  ; g_tSF
0000c0  0d01              LSRS     r1,r0,#20             ;88
0000c2  a05d              ADR      r0,|L1.568|
0000c4  f7fffffe          BL       __2printf
0000c8  f7fffffe          BL       sfTestReadSpeed
0000cc  e7c9              B        |L1.98|
                  |L1.206|
0000ce  b10c              CBZ      r4,|L1.212|
0000d0  1e64              SUBS     r4,r4,#1              ;94
0000d2  e00d              B        |L1.240|
                  |L1.212|
0000d4  a062              ADR      r0,|L1.608|
0000d6  e009              B        |L1.236|
                  |L1.216|
0000d8  6968              LDR      r0,[r5,#0x14]         ;107  ; g_tSF
0000da  f04f31ff          MOV      r1,#0xffffffff        ;107
0000de  eb012090          ADD      r0,r1,r0,LSR #10      ;107
0000e2  42a0              CMP      r0,r4                 ;107
0000e4  d901              BLS      |L1.234|
0000e6  1c64              ADDS     r4,r4,#1              ;107
0000e8  e002              B        |L1.240|
                  |L1.234|
0000ea  a061              ADR      r0,|L1.624|
                  |L1.236|
0000ec  f7fffffe          BL       __2printf
                  |L1.240|
0000f0  02a0              LSLS     r0,r4,#10             ;115
0000f2  f7fffffe          BL       sfViewData
0000f6  e7b4              B        |L1.98|
;;;127    		{
;;;128    			case KEY_DOWN_K1:			/* K1键按下 */
;;;129    				break;
;;;130    
;;;131    			case KEY_UP_K1:				/* K1键弹起 */
;;;132    				break;
;;;133    
;;;134    			case KEY_DOWN_K2:			/* K2键按下 */
;;;135    				break;
;;;136    
;;;137    			case KEY_UP_K2:				/* K2键弹起 */
;;;138    				break;
;;;139    
;;;140    			case KEY_DOWN_K3:			/* K3键按下 */
;;;141    				break;
;;;142    
;;;143    			case KEY_UP_K3:				/* K3键弹起 */
;;;144    				break;
;;;145    
;;;146    			case JOY_DOWN_U:			/* 摇杆UP键按下 */
;;;147    				break;
;;;148    
;;;149    			case JOY_DOWN_D:			/* 摇杆DOWN键按下 */
;;;150    				break;
;;;151    
;;;152    			case JOY_DOWN_L:			/* 摇杆LEFT键按下 */
;;;153    				break;
;;;154    
;;;155    			case JOY_DOWN_R:			/* 摇杆RIGHT键按下 */
;;;156    				break;
;;;157    
;;;158    			case JOY_DOWN_OK:			/* 摇杆OK键按下 */
;;;159    				break;
;;;160    
;;;161    			case JOY_UP_OK:				/* 摇杆OK键弹起 */
;;;162    				break;
;;;163    
;;;164    			case KEY_NONE:				/* 无键按下 */
;;;165    			default:
;;;166    				/* 其它的键值不处理 */
;;;167    				break;
;;;168    		}		
;;;169    	}
;;;170    }
;;;171    
                          ENDP

                  |L1.248|
                          DCD      g_tSF
                  |L1.252|
0000fc  bcecb2e2          DCB      188,236,178,226,181,189,180,174,208,208,"Flash, ID = %08"
000100  b5bdb4ae
000104  d0d0466c
000108  6173682c
00010c  20494420
000110  3d202530
000114  38      
000115  582c20d0          DCB      "X, ",208,205,186,197,": %s \r\n",0
000119  cdbac53a
00011d  20257320
000121  0d0a00  
                  |L1.292|
000124  20202020          DCB      "    ",200,221,193,191," : %dM",215,214,189,218,", ",201
000128  c8ddc1bf
00012c  203a2025
000130  644dd7d6
000134  bdda2c20
000138  c9      
000139  c8c7f8b4          DCB      200,199,248,180,243,208,161," : %d",215,214,189,218,"\r\n"
00013d  f3d0a120
000141  3a202564
000145  d7d6bdda
000149  0d0a    
00014b  00                DCB      0
                  |L1.332|
00014c  0d0aa1be          DCB      "\r\n",161,190,"1 - ",182,193,180,174,208,208,"Flash, ",181
000150  31202d20
000154  b6c1b4ae
000158  d0d0466c
00015c  6173682c
000160  20b5    
000162  d8d6b73a          DCB      216,214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218
000166  30782558
00016a  2cb3a4b6
00016e  c83a2564
000172  d7d6bdda
000176  a1bf0d0a          DCB      161,191,"\r\n",0
00017a  00      
00017b  00                DCB      0
                  |L1.380|
00017c  0d0aa1be          DCB      "\r\n",161,190,"2 - ",208,180,180,174,208,208,"Flash, ",181
000180  32202d20
000184  d0b4b4ae
000188  d0d0466c
00018c  6173682c
000190  20b5    
000192  d8d6b73a          DCB      216,214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218
000196  30782558
00019a  2cb3a4b6
00019e  c83a2564
0001a2  d7d6bdda
0001a6  a1bf0d0a          DCB      161,191,"\r\n",0
0001aa  00      
0001ab  00                DCB      0
                  |L1.428|
0001ac  0d0aa1be          DCB      "\r\n",161,190,"3 - ",178,193,179,253,213,251,184,246,180
0001b0  33202d20
0001b4  b2c1b3fd
0001b8  d5fbb8f6
0001bc  b4      
0001bd  aed0d046          DCB      174,208,208,"Flash",161,191,"\r\n",0
0001c1  6c617368
0001c5  a1bf0d0a
0001c9  00      
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L1.460|
0001cc  b2c1b3fd          DCB      178,193,179,253,180,174,208,208,"Flash",205,234,179,201,163
0001d0  b4aed0d0
0001d4  466c6173
0001d8  68cdeab3
0001dc  c9a3    
0001de  a12c20ba          DCB      161,", ",186,196,202,177,": %dms\r\n",0
0001e2  c4cab13a
0001e6  2025646d
0001ea  730d0a00
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L1.496|
0001f0  0d0aa1be          DCB      "\r\n",161,190,"4 - ",208,180,213,251,184,246,180,174,208
0001f4  34202d20
0001f8  d0b4d5fb
0001fc  b8f6b4ae
000200  d0      
000201  d0466c61          DCB      208,"Flash, ",200,171,"0x55",161,191,"\r\n",0
000205  73682c20
000209  c8ab3078
00020d  3535a1bf
000211  0d0a00  
                  |L1.532|
000214  0d0aa1be          DCB      "\r\n",161,190,"5 - ",208,180,213,251,184,246,180,174,208
000218  35202d20
00021c  d0b4d5fb
000220  b8f6b4ae
000224  d0      
000225  d0466c61          DCB      208,"Flash, ",200,171,"0xAA",161,191,"\r\n",0
000229  73682c20
00022d  c8ab3078
000231  4141a1bf
000235  0d0a00  
                  |L1.568|
000238  0d0aa1be          DCB      "\r\n",161,190,"6 - ",182,193,213,251,184,246,180,174,208
00023c  36202d20
000240  b6c1d5fb
000244  b8f6b4ae
000248  d0      
000249  d0466c61          DCB      208,"Flash, %dM",215,214,189,218,161,191,"\r\n",0
00024d  73682c20
000251  25644dd7
000255  d6bddaa1
000259  bf0d0a00
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L1.608|
000260  d2d1bead          DCB      210,209,190,173,202,199,215,238,199,176,"\r\n",0
000264  cac7d7ee
000268  c7b00d0a
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L1.624|
000270  d2d1bead          DCB      210,209,190,173,202,199,215,238,186,243,"\r\n",0
000274  cac7d7ee
000278  baf30d0a
00027c  00      
00027d  00                DCB      0
00027e  00                DCB      0
00027f  00                DCB      0

                          AREA ||i.sfDispMenu||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  sfDispMenu PROC
;;;380    */
;;;381    static void sfDispMenu(void)
000000  b510              PUSH     {r4,lr}
;;;382    {
;;;383    	printf("\r\n*******************************************\r\n");
000002  a016              ADR      r0,|L2.92|
000004  f7fffffe          BL       __2printf
;;;384    	printf("请选择操作命令:\r\n");
000008  a020              ADR      r0,|L2.140|
00000a  f7fffffe          BL       __2printf
;;;385    	printf("【1 - 读串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00000e  f44f5480          MOV      r4,#0x1000
000012  4622              MOV      r2,r4
000014  2100              MOVS     r1,#0
000016  a022              ADR      r0,|L2.160|
000018  f7fffffe          BL       __2printf
;;;386    	printf("【2 - 写串行Flash, 地址:0x%X,长度:%d字节】\r\n", TEST_ADDR, TEST_SIZE);
00001c  4622              MOV      r2,r4
00001e  2100              MOVS     r1,#0
000020  a02b              ADR      r0,|L2.208|
000022  f7fffffe          BL       __2printf
;;;387    	printf("【3 - 擦除整个串行Flash】\r\n");
000026  a036              ADR      r0,|L2.256|
000028  f7fffffe          BL       __2printf
;;;388    	printf("【4 - 写整个串行Flash, 全0x55】\r\n");
00002c  a03b              ADR      r0,|L2.284|
00002e  f7fffffe          BL       __2printf
;;;389    	printf("【5 - 写整个串行Flash, 全0xAA】\r\n");
000032  a043              ADR      r0,|L2.320|
000034  f7fffffe          BL       __2printf
;;;390    	printf("【6 - 读整个串行Flash, 测试读速度】\r\n");
000038  a04a              ADR      r0,|L2.356|
00003a  f7fffffe          BL       __2printf
;;;391    	printf("【Z - 读取前1K，地址自动减少】\r\n");
00003e  a053              ADR      r0,|L2.396|
000040  f7fffffe          BL       __2printf
;;;392    	printf("【X - 读取后1K，地址自动增加】\r\n");
000044  a05a              ADR      r0,|L2.432|
000046  f7fffffe          BL       __2printf
;;;393    	printf("其他任意键 - 显示命令提示\r\n");
00004a  a062              ADR      r0,|L2.468|
00004c  f7fffffe          BL       __2printf
;;;394    	printf("\r\n");
000050  e8bd4010          POP      {r4,lr}
000054  a066              ADR      r0,|L2.496|
000056  f7ffbffe          B.W      __2printf
;;;395    }
;;;396    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
00005c  0d0a2a2a          DCB      "\r\n*******************************************\r\n",0
000060  2a2a2a2a
000064  2a2a2a2a
000068  2a2a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a2a
000080  2a2a2a2a
000084  2a2a2a2a
000088  2a0d0a00
                  |L2.140|
00008c  c7ebd1a1          DCB      199,235,209,161,212,241,178,217,215,247,195,252,193,238,":"
000090  d4f1b2d9
000094  d7f7c3fc
000098  c1ee3a  
00009b  0d0a00            DCB      "\r\n",0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L2.160|
0000a0  a1be3120          DCB      161,190,"1 - ",182,193,180,174,208,208,"Flash, ",181,216
0000a4  2d20b6c1
0000a8  b4aed0d0
0000ac  466c6173
0000b0  682c20b5
0000b4  d8      
0000b5  d6b73a30          DCB      214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218,161
0000b9  7825582c
0000bd  b3a4b6c8
0000c1  3a2564d7
0000c5  d6bddaa1
0000c9  bf0d0a00          DCB      191,"\r\n",0
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L2.208|
0000d0  a1be3220          DCB      161,190,"2 - ",208,180,180,174,208,208,"Flash, ",181,216
0000d4  2d20d0b4
0000d8  b4aed0d0
0000dc  466c6173
0000e0  682c20b5
0000e4  d8      
0000e5  d6b73a30          DCB      214,183,":0x%X,",179,164,182,200,":%d",215,214,189,218,161
0000e9  7825582c
0000ed  b3a4b6c8
0000f1  3a2564d7
0000f5  d6bddaa1
0000f9  bf0d0a00          DCB      191,"\r\n",0
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L2.256|
000100  a1be3320          DCB      161,190,"3 - ",178,193,179,253,213,251,184,246,180,174,208
000104  2d20b2c1
000108  b3fdd5fb
00010c  b8f6b4ae
000110  d0      
000111  d0466c61          DCB      208,"Flash",161,191,"\r\n",0
000115  7368a1bf
000119  0d0a00  
                  |L2.284|
00011c  a1be3420          DCB      161,190,"4 - ",208,180,213,251,184,246,180,174,208,208,"F"
000120  2d20d0b4
000124  d5fbb8f6
000128  b4aed0d0
00012c  46      
00012d  6c617368          DCB      "lash, ",200,171,"0x55",161,191,"\r\n",0
000131  2c20c8ab
000135  30783535
000139  a1bf0d0a
00013d  00      
00013e  00                DCB      0
00013f  00                DCB      0
                  |L2.320|
000140  a1be3520          DCB      161,190,"5 - ",208,180,213,251,184,246,180,174,208,208,"F"
000144  2d20d0b4
000148  d5fbb8f6
00014c  b4aed0d0
000150  46      
000151  6c617368          DCB      "lash, ",200,171,"0xAA",161,191,"\r\n",0
000155  2c20c8ab
000159  30784141
00015d  a1bf0d0a
000161  00      
000162  00                DCB      0
000163  00                DCB      0
                  |L2.356|
000164  a1be3620          DCB      161,190,"6 - ",182,193,213,251,184,246,180,174,208,208,"F"
000168  2d20b6c1
00016c  d5fbb8f6
000170  b4aed0d0
000174  46      
000175  6c617368          DCB      "lash, ",178,226,202,212,182,193,203,217,182,200,161,191
000179  2c20b2e2
00017d  cad4b6c1
000181  cbd9b6c8
000185  a1bf    
000187  0d0a00            DCB      "\r\n",0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L2.396|
00018c  a1be5a20          DCB      161,190,"Z - ",182,193,200,161,199,176,"1K",163,172,181,216
000190  2d20b6c1
000194  c8a1c7b0
000198  314ba3ac
00019c  b5d8    
00019e  d6b7d7d4          DCB      214,183,215,212,182,175,188,245,201,217,161,191,"\r\n",0
0001a2  b6afbcf5
0001a6  c9d9a1bf
0001aa  0d0a00  
0001ad  00                DCB      0
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L2.432|
0001b0  a1be5820          DCB      161,190,"X - ",182,193,200,161,186,243,"1K",163,172,181,216
0001b4  2d20b6c1
0001b8  c8a1baf3
0001bc  314ba3ac
0001c0  b5d8    
0001c2  d6b7d7d4          DCB      214,183,215,212,182,175,212,246,188,211,161,191,"\r\n",0
0001c6  b6afd4f6
0001ca  bcd3a1bf
0001ce  0d0a00  
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L2.468|
0001d4  c6e4cbfb          DCB      198,228,203,251,200,206,210,226,188,252," - ",207,212,202
0001d8  c8ced2e2
0001dc  bcfc202d
0001e0  20cfd4ca
0001e4  bec3fcc1          DCB      190,195,252,193,238,204,225,202,190,"\r\n",0
0001e8  eecce1ca
0001ec  be0d0a00
                  |L2.496|
0001f0  0d0a00            DCB      "\r\n",0
0001f3  00                DCB      0

                          AREA ||i.sfReadTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfReadTest PROC
;;;179    */
;;;180    static void sfReadTest(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;181    {
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;182    	uint16_t i;
;;;183    	int32_t iTime1, iTime2;
;;;184    	uint8_t buf[TEST_SIZE];
;;;185    
;;;186    	/* 起始地址 = 0， 数据长度为 256 */
;;;187    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000008  f7fffffe          BL       bsp_GetRunTime
00000c  4680              MOV      r8,r0
;;;188    	sf_ReadBuffer(buf, TEST_ADDR, TEST_SIZE);
00000e  f44f5580          MOV      r5,#0x1000
000012  466e              MOV      r6,sp
000014  462a              MOV      r2,r5
000016  2100              MOVS     r1,#0
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       sf_ReadBuffer
;;;189    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
00001e  f7fffffe          BL       bsp_GetRunTime
000022  4607              MOV      r7,r0
;;;190    	printf("读串行Flash成功，数据如下：\r\n");
000024  a013              ADR      r0,|L3.116|
000026  f7fffffe          BL       __2printf
;;;191    
;;;192    	/* 打印数据 */
;;;193    	for (i = 0; i < TEST_SIZE; i++)
00002a  2400              MOVS     r4,#0
                  |L3.44|
;;;194    	{
;;;195    		printf(" %02X", buf[i]);
00002c  a019              ADR      r0,|L3.148|
00002e  5d31              LDRB     r1,[r6,r4]
000030  f7fffffe          BL       __2printf
;;;196    
;;;197    		if ((i & 31) == 31)
000034  43e0              MVNS     r0,r4
000036  06c0              LSLS     r0,r0,#27
000038  d004              BEQ      |L3.68|
;;;198    		{
;;;199    			printf("\r\n");	/* 每行显示16字节数据 */
;;;200    		}
;;;201    		else if ((i & 31) == 15)
00003a  f004001f          AND      r0,r4,#0x1f
00003e  280f              CMP      r0,#0xf
000040  d002              BEQ      |L3.72|
000042  e004              B        |L3.78|
                  |L3.68|
000044  a015              ADR      r0,|L3.156|
000046  e000              B        |L3.74|
                  |L3.72|
;;;202    		{
;;;203    			printf(" - ");
000048  a015              ADR      r0,|L3.160|
                  |L3.74|
00004a  f7fffffe          BL       __2printf
                  |L3.78|
00004e  1c64              ADDS     r4,r4,#1
000050  b2a4              UXTH     r4,r4                 ;193
000052  42ac              CMP      r4,r5                 ;193
000054  d3ea              BCC      |L3.44|
;;;204    		}
;;;205    	}
;;;206    
;;;207    	/* 打印读速度 */
;;;208    	printf("数据长度: %d字节, 读耗时: %dms, 读速度: %d Bytes/s\r\n", TEST_SIZE, iTime2 - iTime1, (TEST_SIZE * 1000) / (iTime2 - iTime1));
000056  eba70208          SUB      r2,r7,r8
00005a  f44f107a          MOV      r0,#0x3e8000
00005e  fb90f3f2          SDIV     r3,r0,r2
000062  4629              MOV      r1,r5
000064  480f              LDR      r0,|L3.164|
000066  f7fffffe          BL       __2printf
;;;209    }
00006a  f50d5d80          ADD      sp,sp,#0x1000
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;210    
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
000074  b6c1b4ae          DCB      182,193,180,174,208,208,"Flash",179,201,185,166,163,172,202
000078  d0d0466c
00007c  617368b3
000080  c9b9a6a3
000084  acca    
000086  fdbeddc8          DCB      253,190,221,200,231,207,194,163,186,"\r\n",0
00008a  e7cfc2a3
00008e  ba0d0a00
000092  00                DCB      0
000093  00                DCB      0
                  |L3.148|
000094  20253032          DCB      " %02X",0
000098  5800    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L3.156|
00009c  0d0a00            DCB      "\r\n",0
00009f  00                DCB      0
                  |L3.160|
0000a0  202d2000          DCB      " - ",0
                  |L3.164|
                          DCD      ||i.sfTestReadSpeed||+0x60

                          AREA ||i.sfTestReadSpeed||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfTestReadSpeed PROC
;;;219    */
;;;220    static void sfTestReadSpeed(void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;221    {
000004  b081              SUB      sp,sp,#4
000006  f5ad5d80          SUB      sp,sp,#0x1000
;;;222    	uint16_t i;
;;;223    	int32_t iTime1, iTime2;
;;;224    	uint8_t buf[TEST_SIZE];
;;;225    	uint32_t uiAddr;
;;;226    
;;;227    	/* 起始地址 = 0， 数据长度为 256 */
;;;228    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
00000a  f7fffffe          BL       bsp_GetRunTime
;;;229    	uiAddr = 0;
00000e  2500              MOVS     r5,#0
000010  4607              MOV      r7,r0                 ;228
;;;230    	for (i = 0; i < g_tSF.TotalSize / TEST_SIZE; i++, uiAddr += TEST_SIZE)
000012  462c              MOV      r4,r5
000014  4e11              LDR      r6,|L4.92|
000016  46e8              MOV      r8,sp                 ;224
;;;231    	{
;;;232    		sf_ReadBuffer(buf, uiAddr, TEST_SIZE);
000018  f44f5980          MOV      r9,#0x1000
00001c  e008              B        |L4.48|
                  |L4.30|
00001e  464a              MOV      r2,r9
000020  4629              MOV      r1,r5
000022  4640              MOV      r0,r8
000024  f7fffffe          BL       sf_ReadBuffer
000028  1c64              ADDS     r4,r4,#1
00002a  b2a4              UXTH     r4,r4                 ;230
00002c  f5055580          ADD      r5,r5,#0x1000         ;230
                  |L4.48|
000030  6970              LDR      r0,[r6,#0x14]         ;230  ; g_tSF
000032  ebb43f10          CMP      r4,r0,LSR #12         ;230
000036  d3f2              BCC      |L4.30|
;;;233    	}
;;;234    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
000038  f7fffffe          BL       bsp_GetRunTime
;;;235    
;;;236    	/* 打印读速度 */
;;;237    	printf("数据长度: %d字节, 读耗时: %dms, 读速度: %d Bytes/s\r\n", g_tSF.TotalSize, iTime2 - iTime1, (g_tSF.TotalSize * 1000) / (iTime2 - iTime1));
00003c  6971              LDR      r1,[r6,#0x14]  ; g_tSF
00003e  f44f727a          MOV      r2,#0x3e8
000042  fb01f302          MUL      r3,r1,r2
000046  1bc2              SUBS     r2,r0,r7
000048  fbb3f3f2          UDIV     r3,r3,r2
00004c  a004              ADR      r0,|L4.96|
00004e  f7fffffe          BL       __2printf
;;;238    }
000052  b001              ADD      sp,sp,#4
000054  f50d5d80          ADD      sp,sp,#0x1000
000058  e8bd83f0          POP      {r4-r9,pc}
;;;239    
                          ENDP

                  |L4.92|
                          DCD      g_tSF
                  |L4.96|
000060  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %d",215,214,189,218,","
000064  b3a4b6c8
000068  3a202564
00006c  d7d6bdda
000070  2c      
000071  20b6c1ba          DCB      " ",182,193,186,196,202,177,": %dms, ",182,193,203,217,182
000075  c4cab13a
000079  2025646d
00007d  732c20b6
000081  c1cbd9b6
000085  c83a2025          DCB      200,": %d Bytes/s\r\n",0
000089  64204279
00008d  7465732f
000091  730d0a00
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.sfViewData||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  sfViewData PROC
;;;348    */
;;;349    static void sfViewData(uint32_t _uiAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;350    {
000002  f5ad6d80          SUB      sp,sp,#0x400
000006  4604              MOV      r4,r0
;;;351    	uint16_t i;
;;;352    	uint8_t buf[1024];
;;;353    
;;;354    	sf_ReadBuffer(buf, _uiAddr,  1024);		/* 读数据 */
000008  f44f6580          MOV      r5,#0x400
00000c  4601              MOV      r1,r0
00000e  462a              MOV      r2,r5
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       sf_ReadBuffer
;;;355    	printf("地址：0x%08X; 数据长度 = 1024\r\n", _uiAddr);
000016  4621              MOV      r1,r4
000018  a00e              ADR      r0,|L5.84|
00001a  f7fffffe          BL       __2printf
;;;356    
;;;357    	/* 打印数据 */
;;;358    	for (i = 0; i < 1024; i++)
00001e  2400              MOVS     r4,#0
000020  466e              MOV      r6,sp                 ;352
                  |L5.34|
;;;359    	{
;;;360    		printf(" %02X", buf[i]);
000022  a014              ADR      r0,|L5.116|
000024  5d31              LDRB     r1,[r6,r4]
000026  f7fffffe          BL       __2printf
;;;361    
;;;362    		if ((i & 31) == 31)
00002a  43e0              MVNS     r0,r4
00002c  06c0              LSLS     r0,r0,#27
00002e  d004              BEQ      |L5.58|
;;;363    		{
;;;364    			printf("\r\n");	/* 每行显示16字节数据 */
;;;365    		}
;;;366    		else if ((i & 31) == 15)
000030  f004001f          AND      r0,r4,#0x1f
000034  280f              CMP      r0,#0xf
000036  d002              BEQ      |L5.62|
000038  e004              B        |L5.68|
                  |L5.58|
00003a  a010              ADR      r0,|L5.124|
00003c  e000              B        |L5.64|
                  |L5.62|
;;;367    		{
;;;368    			printf(" - ");
00003e  a010              ADR      r0,|L5.128|
                  |L5.64|
000040  f7fffffe          BL       __2printf
                  |L5.68|
000044  1c64              ADDS     r4,r4,#1
000046  b2a4              UXTH     r4,r4                 ;358
000048  42ac              CMP      r4,r5                 ;358
00004a  d3ea              BCC      |L5.34|
;;;369    		}
;;;370    	}
;;;371    }
00004c  f50d6d80          ADD      sp,sp,#0x400
000050  bd70              POP      {r4-r6,pc}
;;;372    
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
000054  b5d8d6b7          DCB      181,216,214,183,163,186,"0x%08X; ",202,253,190,221,179,164
000058  a3ba3078
00005c  25303858
000060  3b20cafd
000064  beddb3a4
000068  b6c8203d          DCB      182,200," = 1024\r\n",0
00006c  20313032
000070  340d0a00
                  |L5.116|
000074  20253032          DCB      " %02X",0
000078  5800    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L5.124|
00007c  0d0a00            DCB      "\r\n",0
00007f  00                DCB      0
                  |L5.128|
000080  202d2000          DCB      " - ",0

                          AREA ||i.sfWriteAll||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfWriteAll PROC
;;;285    */
;;;286    static void sfWriteAll(uint8_t _ch)
000000  b5f0              PUSH     {r4-r7,lr}
;;;287    {
000002  b081              SUB      sp,sp,#4
000004  f5ad5d80          SUB      sp,sp,#0x1000
;;;288    	uint16_t i;
;;;289    	int32_t iTime1, iTime2;
;;;290    	uint8_t buf[4 * 1024];
;;;291    
;;;292    	/* 填充测试缓冲区 */
;;;293    	for (i = 0; i < TEST_SIZE; i++)
000008  2100              MOVS     r1,#0
00000a  f44f5280          MOV      r2,#0x1000
00000e  466e              MOV      r6,sp                 ;290
                  |L6.16|
;;;294    	{
;;;295    		buf[i] = _ch;
000010  5470              STRB     r0,[r6,r1]
000012  1c49              ADDS     r1,r1,#1
000014  b289              UXTH     r1,r1                 ;293
000016  4291              CMP      r1,r2                 ;293
000018  d3fa              BCC      |L6.16|
;;;296    	}
;;;297    
;;;298    	/* 写EEPROM, 起始地址 = 0，数据长度为 256 */
;;;299    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
00001a  f7fffffe          BL       bsp_GetRunTime
00001e  4607              MOV      r7,r0
;;;300    	for (i = 0; i < g_tSF.TotalSize / g_tSF.PageSize; i++)
000020  2400              MOVS     r4,#0
;;;301    	{
;;;302    		if (sf_WriteBuffer(buf, i * g_tSF.PageSize, g_tSF.PageSize) == 0)
000022  4d19              LDR      r5,|L6.136|
000024  e01a              B        |L6.92|
000026  bf00              NOP      
                  |L6.40|
000028  fb02f104          MUL      r1,r2,r4
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       sf_WriteBuffer
000032  b138              CBZ      r0,|L6.68|
;;;303    		{
;;;304    			printf("写串行Flash出错！\r\n");
;;;305    			return;
;;;306    		}
;;;307    		printf(".");
000034  a015              ADR      r0,|L6.140|
000036  f7fffffe          BL       __2printf
;;;308    		if (((i + 1) % 128) == 0)
00003a  0660              LSLS     r0,r4,#25
00003c  f1b04f7e          CMP      r0,#0xfe000000
000040  d007              BEQ      |L6.82|
000042  e009              B        |L6.88|
                  |L6.68|
000044  a012              ADR      r0,|L6.144|
000046  f7fffffe          BL       __2printf
                  |L6.74|
;;;309    		{
;;;310    			printf("\r\n");
;;;311    		}
;;;312    	}
;;;313    	iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
;;;314    
;;;315    	/* 打印读速度 */
;;;316    	printf("数据长度: %dK字节, 写耗时: %dms, 写速度: %dB/s\r\n", g_tSF.TotalSize / 1024, iTime2 - iTime1, (g_tSF.TotalSize * 1000) / (iTime2 - iTime1));
;;;317    }
00004a  b001              ADD      sp,sp,#4
00004c  f50d5d80          ADD      sp,sp,#0x1000
000050  bdf0              POP      {r4-r7,pc}
                  |L6.82|
000052  a014              ADR      r0,|L6.164|
000054  f7fffffe          BL       __2printf
                  |L6.88|
000058  1c64              ADDS     r4,r4,#1              ;310
00005a  b2a4              UXTH     r4,r4                 ;300
                  |L6.92|
00005c  8b2a              LDRH     r2,[r5,#0x18]         ;300  ; g_tSF
00005e  6968              LDR      r0,[r5,#0x14]         ;300  ; g_tSF
000060  fbb0f0f2          UDIV     r0,r0,r2              ;300
000064  42a0              CMP      r0,r4                 ;300
000066  d8df              BHI      |L6.40|
000068  f7fffffe          BL       bsp_GetRunTime
00006c  6969              LDR      r1,[r5,#0x14]         ;316  ; g_tSF
00006e  f44f727a          MOV      r2,#0x3e8             ;316
000072  fb01f302          MUL      r3,r1,r2              ;316
000076  1bc2              SUBS     r2,r0,r7              ;316
000078  fbb3f3f2          UDIV     r3,r3,r2              ;316
00007c  0a89              LSRS     r1,r1,#10             ;316
00007e  a00a              ADR      r0,|L6.168|
000080  f7fffffe          BL       __2printf
000084  e7e1              B        |L6.74|
;;;318    
                          ENDP

000086  0000              DCW      0x0000
                  |L6.136|
                          DCD      g_tSF
                  |L6.140|
00008c  2e00              DCB      ".",0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L6.144|
000090  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,246,180,237,163,161,"\r"
000094  d0d0466c
000098  617368b3
00009c  f6b4eda3
0000a0  a10d    
0000a2  0a00              DCB      "\n",0
                  |L6.164|
0000a4  0d0a00            DCB      "\r\n",0
0000a7  00                DCB      0
                  |L6.168|
0000a8  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %dK",215,214,189,218,","
0000ac  b3a4b6c8
0000b0  3a202564
0000b4  4bd7d6bd
0000b8  da2c    
0000ba  20d0b4ba          DCB      " ",208,180,186,196,202,177,": %dms, ",208,180,203,217,182
0000be  c4cab13a
0000c2  2025646d
0000c6  732c20d0
0000ca  b4cbd9b6
0000ce  c83a2025          DCB      200,": %dB/s\r\n",0
0000d2  64422f73
0000d6  0d0a00  
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.sfWriteTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  sfWriteTest PROC
;;;247    */
;;;248    static void sfWriteTest(void)
000000  b570              PUSH     {r4-r6,lr}
;;;249    {
000002  f5ad5d80          SUB      sp,sp,#0x1000
;;;250    	uint16_t i;
;;;251    	int32_t iTime1, iTime2;
;;;252    	uint8_t buf[TEST_SIZE];
;;;253    
;;;254    	/* 填充测试缓冲区 */
;;;255    	for (i = 0; i < TEST_SIZE; i++)
000006  2000              MOVS     r0,#0
000008  466e              MOV      r6,sp                 ;252
00000a  f44f5480          MOV      r4,#0x1000
                  |L7.14|
;;;256    	{
;;;257    		buf[i] = i;
00000e  5430              STRB     r0,[r6,r0]
000010  1c40              ADDS     r0,r0,#1
000012  b280              UXTH     r0,r0                 ;255
000014  42a0              CMP      r0,r4                 ;255
000016  d3fa              BCC      |L7.14|
;;;258    	}
;;;259    
;;;260    	/* 写EEPROM, 起始地址 = 0，数据长度为 256 */
;;;261    	iTime1 = bsp_GetRunTime();	/* 记下开始时间 */
000018  f7fffffe          BL       bsp_GetRunTime
00001c  4605              MOV      r5,r0
;;;262    	if (sf_WriteBuffer(buf, TEST_ADDR, TEST_SIZE) == 0)
00001e  4622              MOV      r2,r4
000020  2100              MOVS     r1,#0
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       sf_WriteBuffer
000028  b188              CBZ      r0,|L7.78|
;;;263    	{
;;;264    		printf("写串行Flash出错！\r\n");
;;;265    		return;
;;;266    	}
;;;267    	else
;;;268    	{
;;;269    		iTime2 = bsp_GetRunTime();	/* 记下结束时间 */
00002a  f7fffffe          BL       bsp_GetRunTime
00002e  4606              MOV      r6,r0
;;;270    		printf("写串行Flash成功！\r\n");
000030  a009              ADR      r0,|L7.88|
000032  f7fffffe          BL       __2printf
;;;271    	}
;;;272    
;;;273    
;;;274    	/* 打印读速度 */
;;;275    	printf("数据长度: %d字节, 写耗时: %dms, 写速度: %dB/s\r\n", TEST_SIZE, iTime2 - iTime1, (TEST_SIZE * 1000) / (iTime2 - iTime1));
000036  1b72              SUBS     r2,r6,r5
000038  f44f107a          MOV      r0,#0x3e8000
00003c  fb90f3f2          SDIV     r3,r0,r2
000040  4621              MOV      r1,r4
000042  a00a              ADR      r0,|L7.108|
000044  f7fffffe          BL       __2printf
                  |L7.72|
;;;276    }
000048  f50d5d80          ADD      sp,sp,#0x1000
00004c  bd70              POP      {r4-r6,pc}
                  |L7.78|
00004e  a013              ADR      r0,|L7.156|
000050  f7fffffe          BL       __2printf
000054  e7f8              B        |L7.72|
;;;277    
                          ENDP

000056  0000              DCW      0x0000
                  |L7.88|
000058  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,201,185,166,163,161,"\r"
00005c  d0d0466c
000060  617368b3
000064  c9b9a6a3
000068  a10d    
00006a  0a00              DCB      "\n",0
                  |L7.108|
00006c  cafdbedd          DCB      202,253,190,221,179,164,182,200,": %d",215,214,189,218,","
000070  b3a4b6c8
000074  3a202564
000078  d7d6bdda
00007c  2c      
00007d  20d0b4ba          DCB      " ",208,180,186,196,202,177,": %dms, ",208,180,203,217,182
000081  c4cab13a
000085  2025646d
000089  732c20d0
00008d  b4cbd9b6
000091  c83a2025          DCB      200,": %dB/s\r\n",0
000095  64422f73
000099  0d0a00  
                  |L7.156|
00009c  d0b4b4ae          DCB      208,180,180,174,208,208,"Flash",179,246,180,237,163,161,"\r"
0000a0  d0d0466c
0000a4  617368b3
0000a8  f6b4eda3
0000ac  a10d    
0000ae  0a00              DCB      "\n",0

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\app\\src\\demo_spi_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_demo_spi_flash_c_7ee74ca9____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_demo_spi_flash_c_7ee74ca9____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_demo_spi_flash_c_7ee74ca9____REVSH|
#line 128
|__asm___16_demo_spi_flash_c_7ee74ca9____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
